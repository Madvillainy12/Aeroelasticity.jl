var documenterSearchIndex = {"docs":
[{"location":"aerodynamics/steady/#Steady-Thin-Airfoil-Theory","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"(Image: )","category":"page"},{"location":"aerodynamics/steady/#Type-Definition","page":"Steady Thin Airfoil Theory","title":"Type Definition","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Steady","category":"page"},{"location":"aerodynamics/steady/#Aeroelasticity.Steady","page":"Steady Thin Airfoil Theory","title":"Aeroelasticity.Steady","text":"Steady\n\nTwo-dimensional aerodynamic model based on steady thin airfoil theory with parameters  a b a_0 alpha_0 c_d0 c_m0.\n\n\n\n\n\n","category":"type"},{"location":"aerodynamics/steady/#Constructors","page":"Steady Thin Airfoil Theory","title":"Constructors","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Steady()","category":"page"},{"location":"aerodynamics/steady/#Aeroelasticity.Steady-Tuple{}","page":"Steady Thin Airfoil Theory","title":"Aeroelasticity.Steady","text":"Steady()\n\nInitialize a model of type Steady\n\n\n\n\n\n","category":"method"},{"location":"aerodynamics/steady/#Theory","page":"Steady Thin Airfoil Theory","title":"Theory","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"This model is two-dimensional aerodynamic model which is based on the results of steady thin airfoil theory.  It does not have any state variables or rate equations.  Aerodynamic forces are assumed to instantaneously reach steady state values when this model is used.","category":"page"},{"location":"aerodynamics/steady/#Airfoil-Lift","page":"Steady Thin Airfoil Theory","title":"Airfoil Lift","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"The lift coefficient of an airfoil according to thin airfoil theory is given by a_0 (alpha - alpha_0), where a_0 = 2pi is the airfoil's lift slope, alpha is the airfoil's angle of attack, and alpha_0 is the airfoil's zero lift angle of attack. Dimensionalized, this lift force is","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalL = a_0 rho_infty b U_infty^2 (alpha - alpha_0)","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"where rho_infty is the freestream air density, b is the semi-chord, and U_infty is the freestream velocity.","category":"page"},{"location":"aerodynamics/steady/#Normal-and-Axial-Force","page":"Steady Thin Airfoil Theory","title":"Normal and Axial Force","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"The lift force may be expressed in terms of normal and axial components as","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b U_infty^2 (alpha - alpha_0) cos(alpha) \nmathcalA = -a_0 rho_infty b U_infty^2 (alpha - alpha_0) sin(alpha)","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Using the substitutions","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"cos(alpha) = fracuU_infty quad sin(alpha) = fracvU_infty","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"where u is the tangential velocity and v is the normal velocity leads to the following expressions for the normal and axial forces","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b U_infty u (alpha - alpha_0) \nmathcalA = -a_0 rho_infty b U_infty v (alpha - alpha_0)","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Using a small angle approximation allows us to assume alpha approx sin(alpha) = fracvU_infty, which allows us to reduce our expressions for the normal and axial force to ","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b u (v - U_infty alpha_0) \nmathcalA = -a_0 rho_infty b v (v - U_infty alpha_0)","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"If we further assume that u  v (which is reasonable considering our small angle assumption) then","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"U_infty = sqrtu^2 + v^2 approx = u","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"and the expressions for the normal and axial force further reduce to","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b u^2 alpha_texteff \nmathcalA = -a_0 rho_infty b u*v alpha_texteff","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"where alpha_texteff is the effective angle of attack, defined for this model as","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"alpha_texteff = fracvu - alpha_0","category":"page"},{"location":"aerodynamics/steady/#Pitching-Moment","page":"Steady Thin Airfoil Theory","title":"Pitching Moment","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Thin airfoil theory may be used to show that the airfoil quarter chord is the theoretical location of the aerodynamic center.  It may also be used to derive pitching moment coefficients for various airfoil shapes.  To accomodate multiple airfoil shapes, we introduce the quarter-chord moment coefficient c_m_0 as an additional parameter.  Using this coefficient, the pitching moment at a location a b aft of the airfoil mid-chord may be defined as","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalM = 2 rho b^2 u^2 c_m_0 + b left(frac12 + a right) mathcalN","category":"page"},{"location":"aerodynamics/steady/#Compressibility-Correction","page":"Steady Thin Airfoil Theory","title":"Compressibility Correction","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"At this point, a compressibility correction may be applied to the results of thin airfoil theory in order to extend their applicability.  Applying a Prandtl-Glauert compressibility correction, the normal force, axial force, and pitching moment become","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN_textcompressible = fracmathcalNsqrt1 - M^2 \nmathcalA_textcompressible = fracmathcalAsqrt1 - M^2 \nmathcalM_textcompressible = fracmathcalMsqrt1 - M^2","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"where M is the Mach number, defined as fracuc where c is the air speed of sound. ","category":"page"},{"location":"aerodynamics/steady/#Viscous-Forces","page":"Steady Thin Airfoil Theory","title":"Viscous Forces","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"After the Prandtl-Glauert compressibility correction has been applied, an extra force in the axial direction mathcalF_v may be added to account for viscous forces.  The magnitude of this force is scaled using the c_d_0 coefficient.","category":"page"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalF_v = œÅ b u^2 c_d_0","category":"page"},{"location":"aerodynamics/steady/#Examples","page":"Steady Thin Airfoil Theory","title":"Examples","text":"","category":"section"},{"location":"aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Aeroelastic Analysis of a Typical Section","category":"page"},{"location":"aerodynamics/quasisteady/#quasi-steady-thin-airfoil-theory","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory Model","text":"","category":"section"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"(Image: )","category":"page"},{"location":"aerodynamics/quasisteady/#Type-Definition","page":"Quasi-Steady Thin Airfoil Theory","title":"Type Definition","text":"","category":"section"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"QuasiSteady","category":"page"},{"location":"aerodynamics/quasisteady/#Aeroelasticity.QuasiSteady","page":"Quasi-Steady Thin Airfoil Theory","title":"Aeroelasticity.QuasiSteady","text":"QuasiSteady\n\nTwo-dimensional aerodynamic model based on quasi-steady thin airfoil theory with parameters  a b a_0 alpha_0 c_d0 c_m0.\n\n\n\n\n\n","category":"type"},{"location":"aerodynamics/quasisteady/#Constructors","page":"Quasi-Steady Thin Airfoil Theory","title":"Constructors","text":"","category":"section"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"QuasiSteady()","category":"page"},{"location":"aerodynamics/quasisteady/#Aeroelasticity.QuasiSteady-Tuple{}","page":"Quasi-Steady Thin Airfoil Theory","title":"Aeroelasticity.QuasiSteady","text":"QuasiSteady()\n\nInitialize a model of type QuasiSteady\n\n\n\n\n\n","category":"method"},{"location":"aerodynamics/quasisteady/#Theory","page":"Quasi-Steady Thin Airfoil Theory","title":"Theory","text":"","category":"section"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"This model is a two-dimensional quasi-steady aerodynamic model derived from thin airfoil theory.  It does not have any state variables or rate equations.  Since this model includes no state variables to model wake development, this model assumes that the airfoil's wake reaches steady state values instantaneously in response to changes in freestream velocities.","category":"page"},{"location":"aerodynamics/quasisteady/#Normal-Force,-Axial-Force,-and-Pitching-Moment","page":"Quasi-Steady Thin Airfoil Theory","title":"Normal Force, Axial Force, and Pitching Moment","text":"","category":"section"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"The combined forces and moments a b aft of the mid-chord for this model are","category":"page"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b u^2 alpha_texteff + pi rho b^2 left(dotv + uomega - a b dotomega right) \nmathcalA = -a_0 rho_infty b u v alpha_texteff \nmathcalM = 2 rho b^2 u^2 c_m_0 -pi rho_infty b^3 leftfrac12dotv + uomega + b left( frac18 - fraca2 right) dotomega right + b left(frac12 + a right) mathcalN","category":"page"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"where u is the local freestream velocity in the chordwise direction, v is the local freestream velocity in the normal direction, omega is the freestream angular velocity, a defines the reference location, b is the semichord, a_0 is the lift curve slope, rho_infty is the air density, and alpha_texteff is the effective angle of attack.  The effective angle of attack for this model is defined as","category":"page"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"alpha_texteff = fracvu + fracbuleft( frac12 - a right) omega - alpha_0","category":"page"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"where alpha_0 is the zero lift angle of attack.","category":"page"},{"location":"aerodynamics/quasisteady/#Compressibility-Correction","page":"Quasi-Steady Thin Airfoil Theory","title":"Compressibility Correction","text":"","category":"section"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"At this point, a compressibility correction may be applied to the results of thin airfoil theory in order to extend their applicability.  Applying a Prandtl-Glauert compressibility correction, the normal force, axial force, and pitching moment become","category":"page"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"mathcalN_textcompressible = fracmathcalNsqrt1 - M^2 \nmathcalA_textcompressible = fracmathcalAsqrt1 - M^2 \nmathcalM_textcompressible = fracmathcalMsqrt1 - M^2","category":"page"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"where M is the Mach number, defined as fracuc where c is the air speed of sound. ","category":"page"},{"location":"aerodynamics/quasisteady/#Viscous-Forces","page":"Quasi-Steady Thin Airfoil Theory","title":"Viscous Forces","text":"","category":"section"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"After the Prandtl-Glauert compressibility correction has been applied, an extra force in the axial direction mathcalF_v may be added to account for viscous forces.  The magnitude of this force is scaled using the c_d_0 coefficient.","category":"page"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"mathcalF_v = œÅ b u^2 c_d_0","category":"page"},{"location":"aerodynamics/quasisteady/#Examples","page":"Quasi-Steady Thin Airfoil Theory","title":"Examples","text":"","category":"section"},{"location":"aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"Aeroelastic Analysis of a Typical Section","category":"page"},{"location":"aerodynamics/peters/#peters-finite-state-model","page":"Peters' Finite State","title":"Peters' Finite State Model","text":"","category":"section"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"(Image: )","category":"page"},{"location":"aerodynamics/peters/#Type-Definition","page":"Peters' Finite State","title":"Type Definition","text":"","category":"section"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"Peters","category":"page"},{"location":"aerodynamics/peters/#Aeroelasticity.Peters","page":"Peters' Finite State","title":"Aeroelasticity.Peters","text":"Peters{N,TF,TV<:SVector{N,TF},TA<:SMatrix{N,N,TF}}\n\nTwo-dimensional aerodynamic model based on Peters' finite state model with N state  variables, inputs u omega dotv dotomega and parameters a b a_0  alpha_0 c_d0 c_m0\n\n\n\n\n\n","category":"type"},{"location":"aerodynamics/peters/#Constructors","page":"Peters' Finite State","title":"Constructors","text":"","category":"section"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"Peters()","category":"page"},{"location":"aerodynamics/peters/#Aeroelasticity.Peters-Tuple{}","page":"Peters' Finite State","title":"Aeroelasticity.Peters","text":"Peters{N, TF=Float64}()\n\nInitialize a model with type Peters with N state variables\n\n\n\n\n\n","category":"method"},{"location":"aerodynamics/peters/#Theory","page":"Peters' Finite State","title":"Theory","text":"","category":"section"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"For Peter's finite state model, an additional term is added to the expression for the effective angle of attack from the quasi-steady model to account for induced velocity.","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"alpha_texteff = fracvu + fracbuleft( frac12 - a right) omega + fraclambda_0u - alpha_0","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"The induced velocity lambda_0 is approximated from a set of N induced-flow states lambda_1 lambda_2 dots lambda_N as","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"lambda_0 approx frac12 sum_n=1^N b_n lambda_n","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"The set of N first-order ordinary differential equations which govern the N finite aerodynamic states are derived by Peters et al. as","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"barA lambda + fracub lambda = barc left -dotv + uomega + b left(frac12 - a right) dotomega right","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"where","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"barA = barD + bard barb^T + barc bard^T + frac12 barc  barb^T \nbarD_nm = begincases\nfrac12n  n=m+1 \nfrac-12n  n=m-1 \n0  n neq m pm 1 \nendcases\nquad\nbarb_n = begincases\nleft( -1 right)^n-1 frac(N+n-1)(N-n-1)frac1left(nright)^2  n neq N \nleft( -1 right)^n-1  n = N\nendcases\nquad\nbarc_n = frac2n\nquad\nbard_n = begincases\nfrac12  n = 1 \n0  n neq 1\nendcases","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"The same force and moment expressions are used as in the quasi-steady model, but with the new effective angle of attack provided above.","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"Note that while Peter's finite state model can accommodate any number of aerodynamic state variables, generally 3-10 state variables are used.","category":"page"},{"location":"aerodynamics/peters/#Compressibility-Correction","page":"Peters' Finite State","title":"Compressibility Correction","text":"","category":"section"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"A compressibility correction may be applied to the results of this model in order to extend their applicability.  Applying a Prandtl-Glauert compressibility correction, the normal force, axial force, and pitching moment become","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"mathcalN_textcompressible = fracmathcalNsqrt1 - M^2 \nmathcalA_textcompressible = fracmathcalAsqrt1 - M^2 \nmathcalM_textcompressible = fracmathcalMsqrt1 - M^2","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"where M is the Mach number, defined as fracuc where c is the air speed of sound. ","category":"page"},{"location":"aerodynamics/peters/#Viscous-Forces","page":"Peters' Finite State","title":"Viscous Forces","text":"","category":"section"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"After the Prandtl-Glauert compressibility correction has been applied, an extra force in the axial direction mathcalF_v may be added to account for viscous forces.  The magnitude of this force is scaled using the c_d_0 coefficient.","category":"page"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"mathcalF_v = œÅ b u^2 c_d_0","category":"page"},{"location":"aerodynamics/peters/#Examples","page":"Peters' Finite State","title":"Examples","text":"","category":"section"},{"location":"aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"Aeroelastic Analysis of a Typical Section","category":"page"},{"location":"aerodynamics/wagner/#Wagner's-Function","page":"Wagner's Function","title":"Wagner's Function","text":"","category":"section"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"(Image: )","category":"page"},{"location":"aerodynamics/wagner/#Type-Definition","page":"Wagner's Function","title":"Type Definition","text":"","category":"section"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"Wagner","category":"page"},{"location":"aerodynamics/wagner/#Aeroelasticity.Wagner","page":"Wagner's Function","title":"Aeroelasticity.Wagner","text":"Wagner(; C1=0.165, C2=0.335, eps1 = 0.0455, eps2 = 0.3)\n\nTwo-dimensional aerodynamic model based on Wagner's function with state variables  lambda_1 lambda_2, inputs u v omega, and parameters a b a_0  alpha_0 c_d0 c_m0\n\n\n\n\n\n","category":"type"},{"location":"aerodynamics/wagner/#Constructors","page":"Wagner's Function","title":"Constructors","text":"","category":"section"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"Wagner()","category":"page"},{"location":"aerodynamics/wagner/#Aeroelasticity.Wagner-Tuple{}","page":"Wagner's Function","title":"Aeroelasticity.Wagner","text":"Wagner(; C1=0.165, C2=0.335, eps1 = 0.0455, eps2 = 0.3)\n\nInitialize a model of type Wagner\n\n\n\n\n\n","category":"method"},{"location":"aerodynamics/wagner/#Theory","page":"Wagner's Function","title":"Theory","text":"","category":"section"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"This model is a two-dimensional aerodynamic model with unsteady aerodynamics which are derived from Wagner's function.","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"Wagner's function models the indicial response of aerodynamic loads under a sudden change in downwash w at the three-quarter's chord. The exact expression for Wagner's function is","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"phi(t) = frac2pi int_0^infty fracRe(C) sin ( omega (ub) t  )omega domega","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where u is the freestream velocity in the chordwise direction, omega is the freestream angular velocity, b is the semi-chord, and C(omega) is Theodorsen's function.  In many cases, approximate versions of Wagner's function are used rather than the exact expression, of which one of the most common is the approximation of Wagner's function provided by R. T. Jones","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"phi(t) = 1 - C_1 e^-varepsilon_1 (ub) t - C_2 e^-varepsilon_2 (ub) t","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where C_1 = 0165, C_2 = 0335, varepsilon_1 = 0455, and varepsilon_2 = 03.","category":"page"},{"location":"aerodynamics/wagner/#Normal-Force,-Axial-Force,-and-Pitching-Moment","page":"Wagner's Function","title":"Normal Force, Axial Force, and Pitching Moment","text":"","category":"section"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"Wagner's function may be used to model arbitrary airfoil motion using Duhamel's integral.  We start by modeling the increment in the circulatory normal force d mathcalN_c(t) at time t due to an increment in downwash d w(t) at earlier time tau as","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"fracd mathcalN_c(t)a_0 rho_infty u b =  phi(t - tau) d w(tau)","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where phi(t) is the impulse response function, which in this case is R. T. Jones' approximation of Wagner's function.  Superimposing all previous impulse responses using Duhamel's integral yields the following expression for the instantaneous circulatory normal force.","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"fracmathcalN_ca_0 rho_infty u b = int_-infty^t d w(tau) phi(t - tau) dtau = w(0) phi(t) + int_0^t  d w(tau) phi(t - tau) d tau","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"We can transform this equation using integration by parts, yielding","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"fracmathcalN_ca_0 rho_infty u b = w(t) phi(0) - int_0^t w(tau) dphi(t - tau) dtau","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"The integral in this expression may be expressed as a function of the aerodynamic states lambda_1 and lambda_2.","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"lambda_1 = C_1 varepsilon_1 fracub int_0^t w(tau) e^-varepsilon_1 (ub) (t - tau) d tau","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"lambda_2 = C_2 varepsilon_2 fracub int_0^t w(tau) e^-varepsilon_2 (ub) (t - tau) d tau","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"lambda_1 + lambda_2 = - int_0^t w(tau) dphi(t-tau) dtau","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"The expression for the circulatory normal force then reduces to","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"fracmathcalN_ca_0 rho_infty u b = w(t) phi(0) + lambda_1 + lambda_2","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where the downwash at the three quarter's chord is given by","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"w(t) = v + b left( frac12 - a right) omega - ualpha_0","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"and the aerodynamic states variables lambda_1 and lambda_2 are described by the ordinary differential equations","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"dotlambda_1 = -varepsilon_1 fracub lambda_1 + C_1 varepsilon_1 fracub w(t) \ndotlambda_2 = -varepsilon_2 fracub lambda_2 + C_2 varepsilon_2 fracub w(t)","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"The same normal force, axial force, and pitching moment are used as in the quasisteady model, but with the following effective angle of attack","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"alpha_texteff = left(fracvu + fracbu left( frac12 - a right) omega - alpha_0 right) phi(0) + fraclambda_1u + fraclambda_2u","category":"page"},{"location":"aerodynamics/wagner/#Compressibility-Correction","page":"Wagner's Function","title":"Compressibility Correction","text":"","category":"section"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"A compressibility correction may be applied to the results of this model in order to extend their applicability.  Applying a Prandtl-Glauert compressibility correction, the normal force, axial force, and pitching moment become","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"mathcalN_textcompressible = fracmathcalNsqrt1 - M^2 \nmathcalA_textcompressible = fracmathcalAsqrt1 - M^2 \nmathcalM_textcompressible = fracmathcalMsqrt1 - M^2","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where M is the Mach number, defined as fracuc where c is the air speed of sound. ","category":"page"},{"location":"aerodynamics/wagner/#Viscous-Forces","page":"Wagner's Function","title":"Viscous Forces","text":"","category":"section"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"After the Prandtl-Glauert compressibility correction has been applied, an extra force in the axial direction mathcalF_v may be added to account for viscous forces.  The magnitude of this force is scaled using the c_d_0 coefficient.","category":"page"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"mathcalF_v = œÅ b u^2 c_d_0","category":"page"},{"location":"aerodynamics/wagner/#Examples","page":"Wagner's Function","title":"Examples","text":"","category":"section"},{"location":"aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"Aeroelastic Analysis of a Typical Section","category":"page"},{"location":"structures/rigidbody/#Rigid-Body-Model","page":"Rigid Body Model","title":"Rigid Body Model","text":"","category":"section"},{"location":"structures/rigidbody/#Theory","page":"Rigid Body Model","title":"Theory","text":"","category":"section"},{"location":"structures/rigidbody/","page":"Rigid Body Model","title":"Rigid Body Model","text":"A basic six degree of freedom rigid body model based on the SixDOF package.","category":"page"},{"location":"structures/rigidbody/#Type-Definition","page":"Rigid Body Model","title":"Type Definition","text":"","category":"section"},{"location":"structures/rigidbody/","page":"Rigid Body Model","title":"Rigid Body Model","text":"RigidBody","category":"page"},{"location":"structures/rigidbody/#Constructors","page":"Rigid Body Model","title":"Constructors","text":"","category":"section"},{"location":"structures/rigidbody/","page":"Rigid Body Model","title":"Rigid Body Model","text":"RigidBody()","category":"page"},{"location":"structures/rigidbody/#Example-Initialization","page":"Rigid Body Model","title":"Example Initialization","text":"","category":"section"},{"location":"structures/rigidbody/","page":"Rigid Body Model","title":"Rigid Body Model","text":"using Aeroelasticity #hide\nmodel = RigidBody()\nnothing #hide","category":"page"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"Modules = [Aeroelasticity]\nPublic = false\nPrivate = true","category":"page"},{"location":"library/internals/#Aeroelasticity.CoupledModel","page":"Internals","title":"Aeroelasticity.CoupledModel","text":"CoupledModel{M,C}\n\nBase type for coupled models in Aeroelasticity.jl.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/#Aeroelasticity.CoupledModel-Tuple{Any, Any}","page":"Internals","title":"Aeroelasticity.CoupledModel","text":"CoupledModel(submodels, coupling)\n\nDefine a coupled model given a tuple of submodels (of type Submodel) and a  coupling model (of type Coupling).\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#SciMLBase.DAEFunction","page":"Internals","title":"SciMLBase.DAEFunction","text":"DAEFunction(model::Aeroelasticity.CoupledModel, p=nothing)\n\nConstruct an DAEFunction for a coupled model which may be used with  DifferentialEquations.     \n\n\n\n\n\n","category":"type"},{"location":"library/internals/#SciMLBase.ODEFunction","page":"Internals","title":"SciMLBase.ODEFunction","text":"ODEFunction(model::Aeroelasticity.CoupledModel, p=nothing)\n\nConstruct an ODEFunction for a coupled model which may be used with  DifferentialEquations.     \n\n\n\n\n\n","category":"type"},{"location":"library/internals/#Aeroelasticity.additional_parameter_indices-Tuple{Aeroelasticity.CoupledModel}","page":"Internals","title":"Aeroelasticity.additional_parameter_indices","text":"additional_parameter_indices(model::CoupledModel)\n\nReturn the indices corresponding to additional parameters introduced by the model coupling\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_inputs!-Tuple{Any, Aeroelasticity.CoupledModel, Any, Any, Any, Any}","page":"Internals","title":"Aeroelasticity.get_coupling_inputs!","text":"get_coupling_inputs!(y, models::CoupledModel, dx, x, p, t)\n\nIn-place version of get_coupling_inputs\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_inputs-Tuple{Aeroelasticity.CoupledModel, Any, Any, Any, Any}","page":"Internals","title":"Aeroelasticity.get_coupling_inputs","text":"get_coupling_inputs(model::CoupledModel, dx, x, p, t)\n\nCalculate the coupling inputs for a coupled model.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_parameter_jacobian!-Tuple{Any, Aeroelasticity.CoupledModel, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_coupling_parameter_jacobian!","text":"get_coupling_parameter_jacobian!(J, model)\nget_coupling_parameter_jacobian!(J, model, p)\nget_coupling_parameter_jacobian!(J, model, dx, x, p, t)\n\nIn-place version of get_coupling_parameter_jacobian\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_parameter_jacobian-Tuple{Aeroelasticity.CoupledModel, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_coupling_parameter_jacobian","text":"get_coupling_parameter_jacobian(model)\nget_coupling_parameter_jacobian(model, p)\nget_coupling_parameter_jacobian(model, dx, x, y, p, t)\n\nCalculate the jacobian of the coupling function for model with respect to the parameters\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_rate_jacobian!-Tuple{Any, Aeroelasticity.CoupledModel, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_coupling_rate_jacobian!","text":"get_coupling_rate_jacobian!(J, model)\nget_coupling_rate_jacobian!(J, model, p)\nget_coupling_rate_jacobian!(J, model, dx, x, p, t)\n\nIn-place version of get_coupling_rate_jacobian.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_rate_jacobian-Tuple{Aeroelasticity.CoupledModel, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_coupling_rate_jacobian","text":"get_coupling_rate_jacobian(model)\nget_coupling_rate_jacobian(model, p)\nget_coupling_rate_jacobian(model, dx, x, p, t)\n\nCalculate the jacobian of the coupling function with respect to the state rates\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_state_jacobian!-Tuple{Any, Aeroelasticity.CoupledModel, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_coupling_state_jacobian!","text":"get_coupling_state_jacobian!(J, model)\nget_coupling_state_jacobian!(J, model, p)\nget_coupling_state_jacobian!(J, model, dx, x, p, t)\n\nIn-place version of get_coupling_state_jacobian\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_state_jacobian-Tuple{Aeroelasticity.CoupledModel, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_coupling_state_jacobian","text":"get_coupling_state_jacobian(model)\nget_coupling_state_jacobian(model, p)\nget_coupling_state_jacobian(model, dx, x, y, p, t)\n\nCalculate the jacobian of the coupling function for model with respect to the state variables\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_time_gradient!-Tuple{Any, Aeroelasticity.CoupledModel, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_coupling_time_gradient!","text":"get_coupling_time_gradient!(dT, model)\nget_coupling_time_gradient!(dT, model, p)\nget_coupling_time_gradient!(dT, model, dx, x, p, t)\n\nIn-place version of get_coupling_time_gradient\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_coupling_time_gradient-Tuple{Aeroelasticity.CoupledModel, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_coupling_time_gradient","text":"get_coupling_time_gradient(model)\nget_coupling_time_gradient(model, p)\nget_coupling_time_gradient(model, dx, x, y, p, t)\n\nCalculate the derivative of the coupling function for model with respect to time\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_input_jacobian!-Tuple{Any, Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_input_jacobian!","text":"get_input_jacobian!(J, model)\nget_input_jacobian!(J, model, p)\nget_input_jacobian!(J, model, dx, x, y, p, t)\n\nIn-place version of get_input_jacobian\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_input_jacobian-Tuple{Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_input_jacobian","text":"get_input_jacobian(model)\nget_input_jacobian(model, p)\nget_input_jacobian(model, dx, x, y, p, t)\n\nCalculate the jacobian of the residual function for model with respect to the input variables\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_parameter_jacobian!-Tuple{Any, Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_parameter_jacobian!","text":"get_parameter_jacobian!(J, model)\nget_parameter_jacobian!(J, model, p)\nget_parameter_jacobian!(J, model, dx, x, y, p, t)\n\nIn-place version of get_parameter_jacobian\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_parameter_jacobian-Tuple{Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_parameter_jacobian","text":"get_parameter_jacobian(model)\nget_parameter_jacobian(model, p)\nget_parameter_jacobian(model, dx, x, y, p, t)\n\nCalculate the jacobian of the residual function for model with respect to the parameters\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_rate_jacobian!-Tuple{Any, Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_rate_jacobian!","text":"get_rate_jacobian!(J, model)\nget_rate_jacobian!(J, model, p)\nget_rate_jacobian!(J, model, dx, x, y, p, t)\n\nIn-place version of get_rate_jacobian.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_rate_jacobian-Tuple{Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_rate_jacobian","text":"get_rate_jacobian(model)\nget_rate_jacobian(model, p)\nget_rate_jacobian(model, dx, x, y, p, t)\n\nCalculate the jacobian of the residual function for model with respect to the state rates\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_residual!-NTuple{7, Any}","page":"Internals","title":"Aeroelasticity.get_residual!","text":"get_residual!(resid, model, dx, x, y, p, t)\n\nIn-place version of get_residual\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_residual-NTuple{6, Any}","page":"Internals","title":"Aeroelasticity.get_residual","text":"get_residual(model, dx, x, y, p, t)\n\nCalculate the residual for the specified model.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_state_jacobian!-Tuple{Any, Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_state_jacobian!","text":"get_state_jacobian!(J, model)\nget_state_jacobian!(J, model, p)\nget_state_jacobian!(J, model, dx, x, y, p, t)\n\nIn-place version of get_state_jacobian\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_state_jacobian-Tuple{Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_state_jacobian","text":"get_state_jacobian(model)\nget_state_jacobian(model, p)\nget_state_jacobian(model, dx, x, y, p, t)\n\nCalculate the jacobian of the residual function for model with respect to the state variables\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_time_gradient!-Tuple{Any, Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_time_gradient!","text":"get_time_gradient!(dT, model)\nget_time_gradient!(dT, model, p)\nget_time_gradient!(dT, model, dx, x, y, p, t)\n\nIn-place version of get_time_gradient\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.get_time_gradient-Tuple{Any, Vararg{Any, N} where N}","page":"Internals","title":"Aeroelasticity.get_time_gradient","text":"get_time_gradient(model)\nget_time_gradient(model, p)\nget_time_gradient(model, dx, x, y, p, t)\n\nCalculate the derivative of the residual function for model with respect to time\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.number_of_additional_parameters","page":"Internals","title":"Aeroelasticity.number_of_additional_parameters","text":"number_of_additional_parameters(model)\n\nReturn the total number of additional parameters corresponding to a coupled model.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#Aeroelasticity.rate_indices-Tuple{Any}","page":"Internals","title":"Aeroelasticity.rate_indices","text":"rate_indices(model::CoupledModel)\n\nReturn the rate variable indices for each submodel in model\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.separate_inputs","page":"Internals","title":"Aeroelasticity.separate_inputs","text":"separate_inputs(model, y)\n\nSeparate the input vector entries in y\n\n\n\n\n\n","category":"function"},{"location":"library/internals/#Aeroelasticity.separate_rates-Tuple{Any, Any}","page":"Internals","title":"Aeroelasticity.separate_rates","text":"separate_rates(model, dx)\n\nSeparate the rate vector entries in dx.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_additional_parameters!-Tuple{Any, Aeroelasticity.CoupledModel}","page":"Internals","title":"Aeroelasticity.set_additional_parameters!","text":"set_additional_parameters!(p, model::CoupledModel; kwargs...)\n\nSet the elements of the parameter vector p corresponding to additional parameters  introduced by the model coupling to the values specified in kwargs\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_additional_parameters-Tuple{Aeroelasticity.CoupledModel}","page":"Internals","title":"Aeroelasticity.set_additional_parameters","text":"set_additional_parameters(model::CoupledModel; kwargs...)\n\nSet the additional parameter vector values for model using the values in kwargs.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_inputs!-Tuple{Any, Aeroelasticity.CoupledModel, Any}","page":"Internals","title":"Aeroelasticity.set_inputs!","text":"set_inputs!(y, model::CoupledModel, i; kwargs...)\n\nSet the elements of the input vector y corresponding to the ith submodel of model  to the values in kwargs\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_inputs!-Tuple{Any, Submodel}","page":"Internals","title":"Aeroelasticity.set_inputs!","text":"set_inputs!(y, submodel::Submodel; kwargs...)\n\nIn-place version of set_inputs\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_inputs-Tuple{Submodel}","page":"Internals","title":"Aeroelasticity.set_inputs","text":"set_inputs(submodel::Submodel; kwargs...)\n\nSet the input vector values for submodel using the values in kwargs.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_parameters!-Tuple{Any, Aeroelasticity.CoupledModel, Any}","page":"Internals","title":"Aeroelasticity.set_parameters!","text":"set_parameters!(p, model::CoupledModel, i; kwargs...)\n\nSet the elements of the parameter vector p corresponding to the ith submodel of model  to the values in kwargs\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_parameters!-Tuple{Any, Submodel}","page":"Internals","title":"Aeroelasticity.set_parameters!","text":"set_parameters!(p, submodel::Submodel; kwargs...)\n\nIn-place version of set_parameters\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_parameters-Tuple{Coupling}","page":"Internals","title":"Aeroelasticity.set_parameters","text":"set_parameters(coupling::Coupling; kwargs...)\n\nSet the additional parameter vector values for coupling using the values in kwargs.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_parameters-Tuple{Submodel}","page":"Internals","title":"Aeroelasticity.set_parameters","text":"set_parameters(submodel::Submodel; kwargs...)\n\nSet the parameter vector values for submodel using the values in kwargs.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_rates!-Tuple{Any, Submodel}","page":"Internals","title":"Aeroelasticity.set_rates!","text":"set_rates!(dx, submodel::Submodel; kwargs...)\n\nIn-place version of set_rates\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_rates-Tuple{Any}","page":"Internals","title":"Aeroelasticity.set_rates","text":"set_rates(submodel::Submodel; kwargs...)\n\nSet the rate vector values for submodel using the values in kwargs.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_states!-Tuple{Any, Aeroelasticity.CoupledModel, Any}","page":"Internals","title":"Aeroelasticity.set_states!","text":"set_states!(x, model::CoupledModel, i; kwargs...)\n\nSet the elements of the state vector x corresponding to the ith submodel of model  to the values in kwargs\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_states!-Tuple{Any, Submodel}","page":"Internals","title":"Aeroelasticity.set_states!","text":"set_states!(x, submodel::Submodel; kwargs...)\n\nIn-place version of set_states\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#Aeroelasticity.set_states-Tuple{Submodel}","page":"Internals","title":"Aeroelasticity.set_states","text":"set_states(submodel::Submodel; kwargs...)\n\nSet the state vector values for submodel using the values in kwargs.\n\n\n\n\n\n","category":"method"},{"location":"couplings/liftingline-rigidbody/#[LiftingLine](@ref)-[RigidBody](@ref)","page":"LiftingLine + RigidBody","title":"LiftingLine + RigidBody","text":"","category":"section"},{"location":"couplings/liftingline-rigidbody/#Theory","page":"LiftingLine + RigidBody","title":"Theory","text":"","category":"section"},{"location":"couplings/liftingline-rigidbody/","page":"LiftingLine + RigidBody","title":"LiftingLine + RigidBody","text":"This model is defined by coupling the lifting line aerodynamics model with the rigid body model.","category":"page"},{"location":"couplings/liftingline-rigidbody/#Constructors","page":"LiftingLine + RigidBody","title":"Constructors","text":"","category":"section"},{"location":"couplings/liftingline-rigidbody/","page":"LiftingLine + RigidBody","title":"LiftingLine + RigidBody","text":"couple_models(aero::LiftingLine, stru::RigidBody)","category":"page"},{"location":"couplings/liftingline-rigidbody/#Example-Initialization","page":"LiftingLine + RigidBody","title":"Example Initialization","text":"","category":"section"},{"location":"couplings/liftingline-rigidbody/","page":"LiftingLine + RigidBody","title":"LiftingLine + RigidBody","text":"using AerostructuralDynamics #hide\nmodel = couple_models(LiftingLine{6}(Wagner()), RigidBody())\nnothing #hide","category":"page"},{"location":"couplings/liftingline-gxbeam/#[LiftingLine](@ref)-[GEBT](@ref)","page":"LiftingLine + GEBT","title":"LiftingLine + GEBT","text":"","category":"section"},{"location":"couplings/liftingline-gxbeam/#Theory","page":"LiftingLine + GEBT","title":"Theory","text":"","category":"section"},{"location":"couplings/liftingline-gxbeam/","page":"LiftingLine + GEBT","title":"LiftingLine + GEBT","text":"This model is defined by coupling the lifting line aerodynamics model with the geometrically exact beam theory model.","category":"page"},{"location":"couplings/liftingline-gxbeam/#Constructors","page":"LiftingLine + GEBT","title":"Constructors","text":"","category":"section"},{"location":"couplings/liftingline-gxbeam/","page":"LiftingLine + GEBT","title":"LiftingLine + GEBT","text":"couple_models(aero::LiftingLine, stru::GEBT)","category":"page"},{"location":"couplings/liftingline-gxbeam/#Example-Initialization","page":"LiftingLine + GEBT","title":"Example Initialization","text":"","category":"section"},{"location":"couplings/liftingline-gxbeam/","page":"LiftingLine + GEBT","title":"LiftingLine + GEBT","text":"using Aeroelasticity, GXBeam, LinearAlgebra\n\n# discretization\nN = 8 # number of elements\n\n# geometric properties\nspan = 6.096 # m (wing half span)\nchord = 1.8288 # m (chord)\n\n# structural section properties\nxea = 0.33*chord # m (elastic axis, from leading edge)\nEIcc = 9.77e6 # N*m^2 (flat bending rigidity)\nGJ = 0.99e6 # N*m^2 (torsional rigidity)\nŒº = 35.71 # kg/m (mass per unit length)\nxcm = 0.43*chord # m (center of mass, from leading edge)\ni11 = 8.64 # kg*m (moment of inertia about elastic axis)\ni22 = 0.1*i11 # moment of inertia about beam y-axis\ni33 = 0.9*i11 # moment of inertia about beam z-axis\n\n# define geometry\nxpt = range(0, 0, length=N+1) # point x-coordinates (in body frame)\nypt = range(0, span, length=N+1) # point y-coordinates (in body frame)\nzpt = range(0, 0, length=N+1) # point z-coordinates (in body frame)\npoints = [[xpt[i],ypt[i],zpt[i]] for i = 1:N+1]\nstart = 1:N # starting point of each beam element\nstop = 2:N+1 # ending point of each beam element\nframes = fill([0 1 0; 1 0 0; 0 0 -1], N) # local to body frame transformation\ncompliance = fill(Diagonal([0, 0, 0, 1/GJ, 1/EIcc, 0]), N) # compliance matrix\nxm2 = xea - xcm\nmass = fill([\n    Œº 0 0 0 0 -Œº*xm2;\n    0 Œº 0 0 0 0;\n    0 0 Œº Œº*xm2 0 0;\n    0 0 Œº*xm2 i11 0 0;\n    0 0 0 0 i22 0;\n    -Œº*xm2 0 0 0 0 i33], N) # mass matrix\nassembly = GXBeam.Assembly(points, start, stop; frames, compliance, mass)\n\n# boundary condition initialization\nprescribed = Dict(\n    # fixed left edge\n    1 => GXBeam.PrescribedConditions(ux=0, uy=0, uz=0, theta_x=0, theta_y=0,\n        theta_z=0),\n)\n\naero = LiftingLine{N}(Wagner())\n\nstru = GEBT(assembly, prescribed)\n\nmodel = couple_models(aero, stru)\n\nnothing #hide","category":"page"},{"location":"couplings/quasisteady-section/#[QuasiSteady](@ref)-[TypicalSection](@ref)","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"QuasiSteady + TypicalSection","text":"","category":"section"},{"location":"couplings/quasisteady-section/#Theory","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Theory","text":"","category":"section"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"This model is defined by coupling quasi-steady thin airfoil theory aerodynamics","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"(Image: )","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"with the typical section model.  ","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"(Image: )","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"To facilitate this coupling, the freestream velocity components u and v are assumed to be aligned with the undeflected chordwise and normal directions, respectively, so that","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"u approx U_infty \nv approx doth \nomega approx dottheta","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"where U_infty is the freestream velocity magnitude, theta is pitch, and h is plunge. To capture the effect of twist on the circulatory lift (since it is no longer implicitly modeled by the fracvu quantity) twist is added to the effective angle of attack from the quasi-steady model so that the effective angle of attack is now given by","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"alpha_texteff = theta - fracvu + fracbuleft( frac12 - a right) omega - alpha_0","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"The original expression for the effective angle of attack may be used by defining the new variable barv = u theta + v such that","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"alpha_texteff = -fracbarvu + fracbuleft( frac12 - a right) omega - alpha_0","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"A small angle assumption is also used to define the lift about the reference location as","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"mathcalL approx mathcalN","category":"page"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"where mathcalN is the normal force per unit span at the reference location.","category":"page"},{"location":"couplings/quasisteady-section/#Constructors","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Constructors","text":"","category":"section"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"couple_models(aero::QuasiSteady, stru::TypicalSection)","category":"page"},{"location":"couplings/quasisteady-section/#Example-Usage","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Example Usage","text":"","category":"section"},{"location":"couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"Aeroelastic Analysis of a Typical Section","category":"page"},{"location":"guide/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"# this is placed here to pre-install matplotlib so the documentation doesn't get cluttered with the installation print statements.\nusing Plots\npyplot()\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"This guide introduces the basic functionality of this package in a step by step manner.  This is a good starting point for learning about how to use this package.  For more details about how to use a particular model or coupling, refer to the documentation for that particular model or coupling.  For more examples of how to use this package see the examples.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Pages = [\"library.md\"]\nDepth = 3","category":"page"},{"location":"guide/#Installing-Aeroelasticity.jl","page":"Getting Started","title":"Installing Aeroelasticity.jl","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"If you haven't yet, now would be a good time to install Aeroelasticity.jl.  It can be installed from the Julia REPL by typing ] (to enter the package manager) and then running the following command.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"pkg> add https://flow.byu.edu/Aeroelasticity.jl.jl","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Now, that the package is installed we need to load it so that we can use it.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"using Aeroelasticity\nnothing #hide","category":"page"},{"location":"guide/#Assembling-a-Coupled-Model","page":"Getting Started","title":"Assembling a Coupled Model","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"For the purposes of this guide, we will be working with a two-degree-of-freedom typical section model, as shown in the following figure.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Our goal is to create an 2D aeroelastic model which we can use to simulate the behavior of this system.  For the aerodynamic model, we will be using Peters' finite state model (see Peters).  For the structural model, we will be using a two degree of freedom typical section model (see Section).  To assemble an aeroelastic model using these two models we use the assemble_model function.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"model = assemble_model(\n    aerodynamic_model = Peters{4}(), \n    structural_model = Section())\n\nnothing #hide","category":"page"},{"location":"guide/#Defining-Model-Parameters","page":"Getting Started","title":"Defining Model Parameters","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Model parameters are defined using the assemble_parameters function.  In addition to the aerodynamic and structural parameters, we need to define a set of additional parameters for the model coupling.  A description of these parameters may be found in the documentation for each submodel and for the coupling.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"# non-dimensional parameters\nV = 1.0 # = U/(b*œâŒ∏) (reduced velocity)\na = -1/5 # reference point normalized location\ne = -1/10 # center of mass normalized location\nŒº = 20 # = m/(œÅ*pi*b^2) (mass ratio)\nr2 = 6/25 # = IŒ∏/(m*b^2) (radius of gyration about P)\nœÉ = 2/5 # = œâh/œâŒ∏ (natural frequency ratio)\nxŒ∏ = e - a # normalized distance from the reference point to the center of mass\na0 = 2*pi # lift curve slope\nŒ±0 = 0 # zero lift angle\ncd0 = 0 # zero lift drag coefficient\ncm0 = 0 # zero lift moment coefficient\n\n# chosen dimensional parameters\nb = 0.5 # semi-chord\nœÅ = 1 # air density\nœâŒ∏ = 1 # pitch natural frequency\nc = 343 # air speed of sound\n\n# dimensionalized parameters\nU = V*b*œâŒ∏ # velocity\nm = Œº*œÅ*pi*b^2 # mass\nSŒ∏ = m*xŒ∏*b # structural imbalance\nIŒ∏ = r2*m*b^2 # moment of inertia\nœâh = œÉ*œâŒ∏ # plunge natural frequency\nkh = m*œâh^2 # linear spring constant\nkŒ∏ = IŒ∏*œâŒ∏^2 # torsional spring constant\n\np = assemble_parameters(model;\n    aerodynamic_parameters = (a=a, b=b, a0=a0, alpha0=Œ±0, cd0=cd0, cm0=cm0),\n    structural_parameters = (kh=kh, ktheta=kŒ∏, m=m, Stheta=SŒ∏, Itheta=IŒ∏),\n    additional_parameters = (U=U, rho=œÅ, c=c)\n)\n\nnothing #hide","category":"page"},{"location":"guide/#Performing-a-Steady-State-Analysis","page":"Getting Started","title":"Performing a Steady State Analysis","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"We can find steady state solution for our model using DifferentialEquations.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"using DifferentialEquations\n\nf = ODEFunction(model)\n\n# initial guess for state variables\nx0 = zeros(number_of_states(model))\n\n# steady state problem\nprob = SteadyStateProblem(f, x0, p)\n\n# steady state solution\nx_ss = solve(prob, SSRootfind())\n\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"Note that since our system is linear with respect to the state variables, the equilibrium point of our system will be at the origin.","category":"page"},{"location":"guide/#Performing-a-Stability-Analysis","page":"Getting Started","title":"Performing a Stability Analysis","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"The stability of a model for a given set of state variables, inputs, and parameters may be determined by calling the get_eigen function, which returns eigenvalues, left eigenvectors, and right eigenvectors.  For nonlinear systems, the provided state variables must correspond to an equilibrium point for the stability analysis to be theoretically valid.  Since our aeroelastic system is linear with respect to the state variables, any set of state variables will yield the same result.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"\nK, M = linearize(model, x_ss, p)\n\nŒª, U, V = get_eigen(model, K, M)\n\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"A positive real part corresponding to any eigenvalue returned from the get_eigen function indicates that the system is unstable for the provided set of state variables, inputs, and parameters.","category":"page"},{"location":"guide/#Performing-a-Time-Domain-Simulation","page":"Getting Started","title":"Performing a Time Domain Simulation","text":"","category":"section"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"We can simulate the behavior of our system using DifferentialEquations.  Initial state variable values and rates may be specified using  the assemble_states function.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"using DifferentialEquations\n\n# construct ODE function\nf = ODEFunction(model)\n\n# non-zero plunge degree of freedom\nx0 = assemble_states(model;\n    aerodynamic_states = (;lambda=zeros(4)),\n    structural_states = (;h=0.5, theta=0, hdot=0, thetadot=0))\n\n# simulate for 100 seconds\ntspan = (0.0, 100.0)\n\n# assemble problem\nprob = DifferentialEquations.ODEProblem(f, x0, tspan, p)\n\n# solve ODE problem\nsol = DifferentialEquations.solve(prob)\n\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"We can use DifferentialEquations' built-in interface with the Plots package to plot the simulation results.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"using Plots\npyplot()\n\nplot(sol,\n    vars = [5,6,7,8],\n    xlabel = \"t\",\n    ylabel = permutedims([\n        \"\\$h\\$\",\n        \"\\$\\\\theta\\$\",\n        \"\\$\\\\dot{h}\\$\",\n        \"\\$\\\\dot{\\\\theta}\\$\",\n        ]),\n    label = \"\",\n    layout = (4, 1),\n    size = (600,1200)\n    )\n\nsavefig(\"guide-solution.svg\") #hide\n\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"We can also visualize the results of the typical section model using the section_coordinates function.","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"\n# animation parameters\na = -1/5\nb = 0.5\n\n# create animation\nanim = @animate for t in range(tspan[1], tspan[2], length=200)\n    h, Œ∏ = sol(t, idxs=7:8)\n    xplot, yplot = section_coordinates(h, Œ∏; a, b)\n    plot(xplot, yplot;\n        framestyle = :origin,\n        grid = :false,\n        xlims = (-1.0, 1.0),\n        ylims = (-0.75, 0.75),\n        aspect_ratio = 1.0,\n        label = \"t = $(round(t, digits=1))\")\nend\n\ngif(anim, \"guide-simulation.gif\")\n\nnothing #hide","category":"page"},{"location":"guide/","page":"Getting Started","title":"Getting Started","text":"(Image: )","category":"page"},{"location":"aerodynamics/liftingline/#Lifting-Line-Model","page":"Lifting Line Model","title":"Lifting Line Model","text":"","category":"section"},{"location":"aerodynamics/liftingline/#Theory","page":"Lifting Line Model","title":"Theory","text":"","category":"section"},{"location":"aerodynamics/liftingline/","page":"Lifting Line Model","title":"Lifting Line Model","text":"Two-dimensional aerodynamic models may be applied in the context of a three-dimensional analysis by applying these models at multiple chordwise sections along the span of one or more lifting surfaces.  This type of model is applicable when spanwise flow effects are negligible, which is often the case for high aspect ratio wings.","category":"page"},{"location":"aerodynamics/liftingline/","page":"Lifting Line Model","title":"Lifting Line Model","text":"The lifting line model implemented in this package assumes that the aerodynamics of each section is independent of the aerodynamics of the other sections, except as coupled through other models.  The state variables and inputs for this model correspond to the state variables, inputs, and parameters of each of the two-dimensional aerodynamic models, concatenated.  Rate equations are also concatenated.  ","category":"page"},{"location":"aerodynamics/liftingline/","page":"Lifting Line Model","title":"Lifting Line Model","text":"When coupled with a structural model, aircraft linear and angular accelerations are obtained from the structural model and transformed into the (deformed) local beam frame using an appropriate transformation matrix.  The local freestream velocities/accelerations and pitch rates/accelerations are then defined by a subset of the transformed linear and angular accelerations and cross-flow effects are neglected.   An inverse transformation may then be performed to transform the local aerodynamic forces/moments into the reference frame used by the structural model.","category":"page"},{"location":"aerodynamics/liftingline/#Type-Definition","page":"Lifting Line Model","title":"Type Definition","text":"","category":"section"},{"location":"aerodynamics/liftingline/","page":"Lifting Line Model","title":"Lifting Line Model","text":"LiftingLine","category":"page"},{"location":"aerodynamics/liftingline/#Constructors","page":"Lifting Line Model","title":"Constructors","text":"","category":"section"},{"location":"aerodynamics/liftingline/","page":"Lifting Line Model","title":"Lifting Line Model","text":"LiftingLine(models)","category":"page"},{"location":"aerodynamics/liftingline/#Example-Initialization","page":"Lifting Line Model","title":"Example Initialization","text":"","category":"section"},{"location":"aerodynamics/liftingline/","page":"Lifting Line Model","title":"Lifting Line Model","text":"using Aeroelasticity #hide\nmodel = LiftingLine{4}(Wagner())\nnothing #hide","category":"page"},{"location":"couplings/peters-section/#[Peters](@ref)-[TypicalSection](@ref)","page":"Peters' Finite State + Typical Section","title":"Peters + TypicalSection","text":"","category":"section"},{"location":"couplings/peters-section/#Theory","page":"Peters' Finite State + Typical Section","title":"Theory","text":"","category":"section"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"This model is defined by coupling Peter's finite state model","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"(Image: )","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"with the typical section model.  ","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"(Image: )","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"To facilitate this coupling, the freestream velocity components u and v are assumed to be aligned with the undeflected chordwise and normal directions, respectively, so that","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"u approx U_infty \nv approx doth \nomega approx dottheta","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"where U_infty is the freestream velocity magnitude, theta is pitch, and h is plunge. To capture the effect of twist on the circulatory lift (since it is no longer implicitly modeled by the fracvu quantity) twist is added to the effective angle of attack from Peter's finite state model so that the effective angle of attack is now given by","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"alpha_texteff = theta - fracvu + fracbuleft( frac12 - a right) omega  + fraclambda_0u - alpha_0","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"The original expression for the effective angle of attack may be used by defining the new variable barv = u theta + v such that","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"alpha_texteff = -fracbarvu + fracbuleft( frac12 - a right) omega + fraclambda_0u - alpha_0","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"A small angle assumption is also used to define the lift about the reference location as","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"mathcalL approx mathcalN","category":"page"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"where mathcalN is the normal force per unit span at the reference location.","category":"page"},{"location":"couplings/peters-section/#Constructors","page":"Peters' Finite State + Typical Section","title":"Constructors","text":"","category":"section"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"couple_models(aero::Peters, stru::TypicalSection)","category":"page"},{"location":"couplings/peters-section/#Example-Usage","page":"Peters' Finite State + Typical Section","title":"Example Usage","text":"","category":"section"},{"location":"couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"Aeroelastic Analysis of a Typical Section","category":"page"},{"location":"structures/gxbeam/#Geometrically-Exact-Beam-Theory-Model","page":"Geometrically Exact Beam Theory Model","title":"Geometrically Exact Beam Theory Model","text":"","category":"section"},{"location":"structures/gxbeam/#Theory","page":"Geometrically Exact Beam Theory Model","title":"Theory","text":"","category":"section"},{"location":"structures/gxbeam/","page":"Geometrically Exact Beam Theory Model","title":"Geometrically Exact Beam Theory Model","text":"A geometrically exact beam model implemented using the GXBeam package.","category":"page"},{"location":"structures/gxbeam/#Type-Definition","page":"Geometrically Exact Beam Theory Model","title":"Type Definition","text":"","category":"section"},{"location":"structures/gxbeam/","page":"Geometrically Exact Beam Theory Model","title":"Geometrically Exact Beam Theory Model","text":"\"\"\" GEBT","category":"page"},{"location":"structures/gxbeam/","page":"Geometrically Exact Beam Theory Model","title":"Geometrically Exact Beam Theory Model","text":"Construct a geometrically exact beam theory model, as implemented by the GXBeam package. State variables are as defined by GXBeam.  Inputs correspond to the external forces F_xi F_yi F_zi M_xi M_yi M_zi or displacements u_xi u_yi u_zi theta_xi theta_yi theta_zi applied to each node, followed by the distributed loads f_xi f_yi f_zi m_xi m_yi m_zi applied to each beam element, followed by the properties of point masses attached to each beam element m p  I_11 I_22 I_33 I_12 I_13 I_23, followed by the gravity vector, followed by the linear and angular  velocity and accelearation of the system. Parameters correspond to the location p_x  p_y p_z of each node followed by each beam element's properties. Each beam element's  properties are defined by a triad which defines the orientation of the beam element  e_1x e_1y e_1z e_2x e_2y e_2z e_3x e_3y e_3z,  followed by the 21 independent entries of the compliance matrix C_11 C_12 C_13  C_14 C_15 C_16 C_22 C_23 C_24 C_25 C_26 C_33 C_34 C_35  C_36 C_44 C_45 C_46 C_55 C_56 C_66, followed by the beam element's  inertial properties mu x_m2 x_m3 i_22 i_33 i_23. \"\"\" GEBT","category":"page"},{"location":"structures/gxbeam/","page":"Geometrically Exact Beam Theory Model","title":"Geometrically Exact Beam Theory Model","text":"GEBT","category":"page"},{"location":"structures/gxbeam/#Constructors","page":"Geometrically Exact Beam Theory Model","title":"Constructors","text":"","category":"section"},{"location":"structures/gxbeam/","page":"Geometrically Exact Beam Theory Model","title":"Geometrically Exact Beam Theory Model","text":"GEBT(assembly, prescribed)","category":"page"},{"location":"structures/gxbeam/#Example-Initialization","page":"Geometrically Exact Beam Theory Model","title":"Example Initialization","text":"","category":"section"},{"location":"structures/gxbeam/","page":"Geometrically Exact Beam Theory Model","title":"Geometrically Exact Beam Theory Model","text":"using Aeroelasticity, GXBeam, LinearAlgebra\n\n# discretization\nN = 8 # number of elements\n\n# geometric properties\nspan = 6.096 # m (wing half span)\nchord = 1.8288 # m (chord)\n\n# structural section properties\nxea = 0.33*chord # m (elastic axis, from leading edge)\nEIcc = 9.77e6 # N*m^2 (flat bending rigidity)\nGJ = 0.99e6 # N*m^2 (torsional rigidity)\nŒº = 35.71 # kg/m (mass per unit length)\nxcm = 0.43*chord # m (center of mass, from leading edge)\ni11 = 8.64 # kg*m (moment of inertia about elastic axis)\ni22 = 0.1*i11 # moment of inertia about beam y-axis\ni33 = 0.9*i11 # moment of inertia about beam z-axis\n\n# define geometry\nxpt = range(0, 0, length=N+1) # point x-coordinates (in body frame)\nypt = range(0, span, length=N+1) # point y-coordinates (in body frame)\nzpt = range(0, 0, length=N+1) # point z-coordinates (in body frame)\npoints = [[xpt[i],ypt[i],zpt[i]] for i = 1:N+1]\nstart = 1:N # starting point of each beam element\nstop = 2:N+1 # ending point of each beam element\nframes = fill([0 1 0; 1 0 0; 0 0 -1], N) # local to body frame transformation\ncompliance = fill(Diagonal([0, 0, 0, 1/GJ, 1/EIcc, 0]), N) # compliance matrix\nxm2 = xea - xcm\nmass = fill([\n    Œº 0 0 0 0 -Œº*xm2;\n    0 Œº 0 0 0 0;\n    0 0 Œº Œº*xm2 0 0;\n    0 0 Œº*xm2 i11 0 0;\n    0 0 0 0 i22 0;\n    -Œº*xm2 0 0 0 0 i33], N) # mass matrix\nassembly = GXBeam.Assembly(points, start, stop; frames, compliance, mass)\n\n# boundary condition initialization\nprescribed = Dict(\n    # fixed left edge\n    1 => GXBeam.PrescribedConditions(ux=0, uy=0, uz=0, theta_x=0, theta_y=0,\n        theta_z=0),\n)\n\nmodel = GEBT(assembly, prescribed)\n\nnothing #hide","category":"page"},{"location":"couplings/liftingline-gxbeam-rigidbody/#[LiftingLine](@ref)-[GEBT](@ref)-[RigidBody](@ref)","page":"LiftingLine + GEBT + RigidBody","title":"LiftingLine + GEBT + RigidBody","text":"","category":"section"},{"location":"couplings/liftingline-gxbeam-rigidbody/#Theory","page":"LiftingLine + GEBT + RigidBody","title":"Theory","text":"","category":"section"},{"location":"couplings/liftingline-gxbeam-rigidbody/","page":"LiftingLine + GEBT + RigidBody","title":"LiftingLine + GEBT + RigidBody","text":"This model is defined by coupling the lifting line aerodynamics model with the geometrically exact beam theory model and the rigid body dynamics model.","category":"page"},{"location":"couplings/liftingline-gxbeam-rigidbody/#Constructors","page":"LiftingLine + GEBT + RigidBody","title":"Constructors","text":"","category":"section"},{"location":"couplings/liftingline-gxbeam-rigidbody/","page":"LiftingLine + GEBT + RigidBody","title":"LiftingLine + GEBT + RigidBody","text":"couple_models(aero::LiftingLine, stru::GEBT, dyn::RigidBody)","category":"page"},{"location":"couplings/liftingline-gxbeam-rigidbody/#Example-Initialization","page":"LiftingLine + GEBT + RigidBody","title":"Example Initialization","text":"","category":"section"},{"location":"couplings/liftingline-gxbeam-rigidbody/","page":"LiftingLine + GEBT + RigidBody","title":"LiftingLine + GEBT + RigidBody","text":"using Aeroelasticity, GXBeam, LinearAlgebra\n\n# discretization\nN = 8 # number of elements\n\n# geometric properties\nspan = 6.096 # m (wing half span)\nchord = 1.8288 # m (chord)\n\n# structural section properties\nxea = 0.33*chord # m (elastic axis, from leading edge)\nEIcc = 9.77e6 # N*m^2 (flat bending rigidity)\nGJ = 0.99e6 # N*m^2 (torsional rigidity)\nŒº = 35.71 # kg/m (mass per unit length)\nxcm = 0.43*chord # m (center of mass, from leading edge)\ni11 = 8.64 # kg*m (moment of inertia about elastic axis)\ni22 = 0.1*i11 # moment of inertia about beam y-axis\ni33 = 0.9*i11 # moment of inertia about beam z-axis\n\n# define geometry\nxpt = range(0, 0, length=N+1) # point x-coordinates (in body frame)\nypt = range(0, span, length=N+1) # point y-coordinates (in body frame)\nzpt = range(0, 0, length=N+1) # point z-coordinates (in body frame)\npoints = [[xpt[i],ypt[i],zpt[i]] for i = 1:N+1]\nstart = 1:N # starting point of each beam element\nstop = 2:N+1 # ending point of each beam element\nframes = fill([0 1 0; 1 0 0; 0 0 -1], N) # local to body frame transformation\ncompliance = fill(Diagonal([0, 0, 0, 1/GJ, 1/EIcc, 0]), N) # compliance matrix\nxm2 = xea - xcm\nmass = fill([\n    Œº 0 0 0 0 -Œº*xm2;\n    0 Œº 0 0 0 0;\n    0 0 Œº Œº*xm2 0 0;\n    0 0 Œº*xm2 i11 0 0;\n    0 0 0 0 i22 0;\n    -Œº*xm2 0 0 0 0 i33], N) # mass matrix\nassembly = GXBeam.Assembly(points, start, stop; frames, compliance, mass)\n\n# boundary condition initialization\nprescribed = Dict(\n    # fixed left edge\n    1 => GXBeam.PrescribedConditions(ux=0, uy=0, uz=0, theta_x=0, theta_y=0,\n        theta_z=0),\n)\n\naero = LiftingLine{N}(Wagner())\n\nstru = GEBT(assembly, prescribed)\n\ndyn = RigidBody()\n\nmodel = couple_models(aero, stru, dyn)\n\nnothing #hide","category":"page"},{"location":"structures/section/#typical-section-model","page":"Typical Section","title":"Typical Section Model","text":"","category":"section"},{"location":"structures/section/","page":"Typical Section","title":"Typical Section","text":"(Image: )","category":"page"},{"location":"structures/section/#Type-Definition","page":"Typical Section","title":"Type Definition","text":"","category":"section"},{"location":"structures/section/","page":"Typical Section","title":"Typical Section","text":"Section","category":"page"},{"location":"structures/section/#Aeroelasticity.Section","page":"Typical Section","title":"Aeroelasticity.Section","text":"Section\n\nTypical section structural model with state variables h theta doth dottheta, inputs mathcalL mathcalM, and parameters k_h k_theta m S_theta I_theta\n\n\n\n\n\n","category":"type"},{"location":"structures/section/#Constructors","page":"Typical Section","title":"Constructors","text":"","category":"section"},{"location":"structures/section/","page":"Typical Section","title":"Typical Section","text":"Section()","category":"page"},{"location":"structures/section/#Aeroelasticity.Section-Tuple{}","page":"Typical Section","title":"Aeroelasticity.Section","text":"Section()\n\nInitialize a model of type Section\n\n\n\n\n\n","category":"method"},{"location":"structures/section/#Theory","page":"Typical Section","title":"Theory","text":"","category":"section"},{"location":"structures/section/","page":"Typical Section","title":"Typical Section","text":"The equations of motion for this model are:","category":"page"},{"location":"structures/section/","page":"Typical Section","title":"Typical Section","text":"beginbmatrix m  S_theta  S_theta  I_theta endbmatrix\nbeginbmatrix ddoth  ddottheta endbmatrix +\nbeginbmatrix k_h  0  0  k_h endbmatrix\nbeginbmatrix h  theta endbmatrix =\nbeginbmatrix -mathcalL  mathcalM endbmatrix","category":"page"},{"location":"structures/section/","page":"Typical Section","title":"Typical Section","text":"where k_h is the linear spring constant, k_theta is the torsional spring constant, m is the mass per unit span, S_theta is the structural imbalance, I_theta is the mass moment of inertia, mathcalL is the lift per unit span, and mathcalM is the moment per unit span.","category":"page"},{"location":"structures/section/#Examples","page":"Typical Section","title":"Examples","text":"","category":"section"},{"location":"structures/section/","page":"Typical Section","title":"Typical Section","text":"Aeroelastic Analysis of a Typical Section","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Aeroelastic-Analysis-of-a-Typical-Section","page":"Examples","title":"Aeroelastic Analysis of a Typical Section","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\npyplot()\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this example, we perform a two-dimensional aeroelastic analysis for a two degree of freedom typical section model.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The equations of motion for this model are","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"m left(ddoth+b x_theta ddottheta right) + k_h h = -L \nI_theta ddottheta + m b x_theta ddoth + k_theta = M","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"where b is the semichord length, k_h is the linear spring constant, k_theta is the torsional spring constant, m is the mass per unit span, x_theta is the distance to the center of mass from the reference point, I_Œ∏ is the moment of inertia about the reference point, L is the lift per unit span, and M is the moment per unit span about the reference point.  To learn more about how this model is implemented in Aeroelasticity.jl, see Section.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Aeroelasticity.jl has a number of pre-implemented aerodynamic models which may be used to model the aerodynamics of the typical section model.  These models include a steady-state thin airfoil theory model (see Steady), a quasi-steady thin airfoil theory model (see QuasiSteady), an unsteady aerodynamic model based on Wagner's function (see Wagner), and Peters' finite state aerodynamic model (see Peters).  We will perform aeroelastic analyses using each of these models and compare the results.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The non-dimensional parameters we will use are","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"a = -15 quad e = -110  \nr^2 = fracI_Pm b^2 quad sigma = fracomega_homega_theta \nmu = fracmrho_infty pi b^2 quad V = fracUb omega_theta","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"where a is the normalized distance from the semichord to the reference point, e is the normalized distance from the semichord to the center of mass, and omega_h and omega_theta are the uncoupled natural frequencies, defined as","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"omega_h = sqrtfrack_hm quad omega_theta = sqrtfrack_thetaI_P","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Aeroelasticity, DifferentialEquations, LinearAlgebra\n\n# define non-dimensional parameters\nV = range(1e-6, 3.1, length=1000) # = U/(b*œâŒ∏) (reduced velocity)\na = -1/5 # reference point normalized location\ne = -1/10 # center of mass normalized location\nŒº = 20 # = m/(œÅ*pi*b^2) (mass ratio)\nr2 = 6/25 # = IŒ∏/(m*b^2) (radius of gyration about P)\nœÉ = 2/5 # = œâh/œâŒ∏ (natural frequency ratio)\nxŒ∏ = e - a # distance from center of mass to reference point\na0 = 2*pi # lift curve slope\nŒ±0 = 0 # zero lift angle\ncd0 = 0 # drag coefficient\ncm0 = 0 # moment coefficient\n\n# choose dimensional parameters\nb = 1 # semichord\nœÅ = 1 # air density\nœâŒ∏ = 1 # pitch natural frequency\nc = 343 # air speed of sound\n\n# calculate dimensionalized parameters\nU = V*b*œâŒ∏ # freestrean velocity\nm = Œº*œÅ*pi*b^2 # mass\nSŒ∏ = m*xŒ∏*b # mass imbalance\nIŒ∏ = r2*m*b^2 # inertia\nœâh = œÉ*œâŒ∏ # plunge natural frequency\nkh = m*œâh^2 # plunge spring constant\nkŒ∏ = IŒ∏*œâŒ∏^2 # pitch spring constant\n\n# define aerodynamic models\naerodynamic_models = (Steady(), QuasiSteady(), Wagner(), Peters{6}())\n\n# initialize eigenvalue/eigenvector storage\nŒª = Vector{Matrix{ComplexF64}}(undef, length(aerodynamic_models))\nUŒª = Vector{Array{ComplexF64,3}}(undef, length(aerodynamic_models))\nVŒª = Vector{Array{ComplexF64,3}}(undef, length(aerodynamic_models))\n\n# perform an analysis for each aerodynamic model\nfor imodel = 1:length(aerodynamic_models)\n\n    # define coupled model\n    model = assemble_model(;\n        aerodynamic_model = aerodynamic_models[imodel],\n        structural_model = Section())\n \n    # define ODE function\n    f = ODEFunction(model)\n\n    # eigenvalue/eigenvector storage\n    nŒª = number_of_states(model)\n    Œª[imodel] = zeros(ComplexF64, nŒª, length(V))\n    UŒª[imodel] = zeros(ComplexF64, nŒª, nŒª, length(V))\n    VŒª[imodel] = zeros(ComplexF64, nŒª, nŒª, length(V))\n\n    # loop through each reduced frequency\n    for i = 1:length(V)\n\n        # define aerodynamic parameters\n        aerodynamic_parameters = (; a = a, b = b, a0 = a0, alpha0 = Œ±0, cd0 = cd0, cm0 = cm0)\n\n        # define structural parameters\n        structural_parameters = (; kh = kh, ktheta = kŒ∏, m = m, Stheta = SŒ∏, Itheta = IŒ∏)\n\n        # define additional parameters\n        additional_parameters = (; U = U[i], rho = œÅ, c = c)\n\n        # define parameter vector\n        p = assemble_parameters(model;\n            aerodynamic_parameters = aerodynamic_parameters,\n            structural_parameters = structural_parameters,\n            additional_parameters = additional_parameters)\n\n        # define initial guess for equilibrium states\n        x0 = assemble_states(model)\n\n        # find equilibrium point\n        x = solve(SteadyStateProblem(f, x0, p))\n\n        # linearize about equilibrium point\n        K, M = linearize(model, x, p)\n\n        # perform linear stability analysis\n        Œªi, UŒªi, VŒªi = get_eigen(model, K, M)\n\n        # correlate eigenvalues\n        if i > 1\n            # previous left eigenvector matrix\n            UŒªpi = UŒª[imodel][:,:,i-1]\n\n            # use correlation matrix to correlate eigenmodes\n            perm, corruption = correlate_eigenmodes(UŒªpi, M, VŒªi)\n\n            # re-arrange eigenmodes\n            Œªi = Œªi[perm]\n            UŒªi = UŒªi[perm,:]\n            VŒªi = VŒªi[:,perm]\n        end\n\n        # save eigenvalues/eigenvectors\n        Œª[imodel][:,i] = Œªi\n        UŒª[imodel][:,:,i] = UŒªi\n        VŒª[imodel][:,:,i] = VŒªi\n    end\nend\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We now plot the results for each aerodynamic model.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\npyplot()\n\nsp1 = plot(\n    title = \"Non-Dimensional Frequency\",\n    xlim = (0,3.1),\n    xtick = 0.0:0.5:3.0,\n    xlabel = \"\\$ \\\\frac{U}{b \\\\omega_\\\\theta} \\$\",\n    ylim = (0, 1.05),\n    ytick = 0.0:0.2:1.0,\n    ylabel = \"\\$ \\\\frac{\\\\Omega}{\\\\omega_\\\\theta} \\$\",\n    titlefontsize = 10,\n    guidefontsize = 10,\n    legendfontsize = 8,\n    tickfontsize = 9,\n    foreground_color_legend = nothing,\n    background_color_legend = nothing,\n    minorgrid=false\n    )\n\nsp2 = plot(\n    title = \"Non-Dimensional Damping\",\n    xlim = (0,3.1),\n    xtick = 0.0:0.5:3.0,\n    xlabel = \"\\$ \\\\frac{U}{b \\\\omega_\\\\theta} \\$\",\n    ylim = (-0.7, 0.605),\n    ytick = -0.6:0.2:0.6,\n    ylabel = \"\\$ \\\\frac{Œì}{\\\\omega_\\\\theta} \\$\",\n    framestyle = :zerolines,\n    titlefontsize = 10,\n    guidefontsize = 10,\n    legendfontsize = 8,\n    tickfontsize = 9,\n    legend = :topleft,\n    foreground_color_legend = nothing,\n    background_color_legend = nothing,\n    minorgrid = false\n    )\n\nlabels = [\"Steady\", \"Quasi-Steady\", \"Wagner\", \"Peters (N=6)\"]\n\nfor ia = 1:length(aerodynamic_models)\n\n    plot!(sp1, V, imag.(Œª[ia][1,:])/œâŒ∏,\n        label = labels[ia],\n        color = ia,\n        markersize = 1,\n        markerstrokewidth = 0,\n        )\n\n    for i = 2:size(Œª[ia], 1)\n        plot!(sp1, V, imag.(Œª[ia][i,:])/œâŒ∏,\n            label = \"\",\n            color = ia,\n            markersize = 1,\n            markerstrokewidth = 0,\n            )\n    end\n\n    plot!(sp2, V, real.(Œª[ia][1,:])/œâŒ∏,\n        label = labels[ia],\n        color = ia,\n        markersize = 1,\n        markerstrokewidth = 0,\n        )\n\n    for i = 2:size(Œª[ia], 1)\n        plot!(sp2, V, real.(Œª[ia][i,:])/œâŒ∏,\n            label = \"\",\n            color = ia,\n            markersize = 1,\n            markerstrokewidth = 0,\n            )\n    end\nend\n\np1 = plot(sp1, sp2, layout = (1, 2), size = (800, 300))\n\nsavefig(p1, \"typical-section-stability.svg\") #hide\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Using the Wagner or Peters aerodynamic models yields a flutter reduced velocity around 2.2, while the Steady and QuasiSteady aerodynamic models predict significantly lower flutter velocities.  The aerodynamic state variables of the Wagner and Peters models allows these models to capture the impact of vortex shedding on the lift and drag of the profile, therefore we can expect these models to yield more accurate results than the Steady and QuasiSteady models.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The non-dimensional parameters we use for this example match those used by Hodges and Pierce in \"Introduction to Structural Dynamics and Aeroelasticity\".  Hodges and Pierce performed the analysis using a steady-state model and Peter's finite state model with six state variables.   The results presented here for the steady-state and Peters' finite state models match the results presented by Hodges and Pierce in \"Introduction to Structural Dynamics and Aeroelasticity\", which validates our implementation of these models.  Additionally, since the flutter speed predicted by the Wagner and Peters models match, we can be reasonably confident that the Wagner unsteady aerodynamic model is also implemented correctly.","category":"page"},{"location":"examples/#Time-Domain-Simulation-of-a-Typical-Section","page":"Examples","title":"Time Domain Simulation of a Typical Section","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\npyplot()\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Time domain simulations may also be used in order to determine a system's stability.  To perform time domain simulations, an object representing the ordinary differential equations corresponding to the model may be generated using the get_ode function and then solved using the DifferentialEquations package.  For this example we use the same parameters as in the previous example.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Aeroelasticity, DifferentialEquations, LinearAlgebra\n\n# define non-dimensional parameters\nV = range(1e-6, 3.1, length=1000) # = U/(b*œâŒ∏) (reduced velocity)\na = -1/5 # reference point normalized location\ne = -1/10 # center of mass normalized location\nŒº = 20 # = m/(œÅ*pi*b^2) (mass ratio)\nr2 = 6/25 # = IŒ∏/(m*b^2) (radius of gyration about P)\nœÉ = 2/5 # = œâh/œâŒ∏ (natural frequency ratio)\nxŒ∏ = e - a # distance from center of mass to reference point\na0 = 2*pi # lift curve slope\nŒ±0 = 0 # zero lift angle\ncd0 = 0 # drag coefficient\ncm0 = 0 # moment coefficient\n\n# choose dimensional parameters\nb = 1 # semichord\nœÅ = 1 # air density\nœâŒ∏ = 1 # pitch natural frequency\nc = 343 # air speed of sound\n\n# calculate dimensionalized parameters\nU = V*b*œâŒ∏ # freestrean velocity\nm = Œº*œÅ*pi*b^2 # mass\nSŒ∏ = m*xŒ∏*b # mass imbalance\nIŒ∏ = r2*m*b^2 # inertia\nœâh = œÉ*œâŒ∏ # plunge natural frequency\nkh = m*œâh^2 # plunge spring constant\nkŒ∏ = IŒ∏*œâŒ∏^2 # pitch spring constant\n\n# reduced velocity\nV = 1.0 # = U/(b*œâŒ∏)\n\n# dimensionalized velocity\nU = V*b*œâŒ∏\n\n# define coupled model\nmodel = assemble_model(;\n    aerodynamic_model = Peters{6}(),\n    structural_model = Section())\n\n# define parameter vector\np = assemble_parameters(model;\n    aerodynamic_parameters = (; a = a, b = b, a0 = a0, alpha0 = Œ±0, cd0 = cd0, cm0 = cm0),\n    structural_parameters = (; kh = kh, ktheta = kŒ∏, m = m, Stheta = SŒ∏, Itheta = IŒ∏),\n    additional_parameters = (; U = U, rho = œÅ, c = c))\n\n# construct ODE function\nf = ODEFunction(model)\n\n# initial states\nx0 = assemble_states(model;\n    aerodynamic_states = (;lambda=zeros(6)),\n    structural_states = (;h=0.5, theta=0, hdot=0, thetadot=0))\n\n# simulate for 100 seconds\ntspan = (0.0, 100.0)\n\n# construct ODE problem\nprob = ODEProblem(f, x0, tspan, p)\n\n# solve ODE\nsol = solve(prob)\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can then plot the solution using DifferentialEquations' built-in interface with the Plots package.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\npyplot()\n\nplot(sol,\n    vars = [7,8,9,10],\n    xlabel = \"t\",\n    ylabel = permutedims([\n        \"\\$h\\$\",\n        \"\\$\\\\theta\\$\",\n        \"\\$\\\\dot{h}\\$\",\n        \"\\$\\\\dot{\\\\theta}\\$\",\n        ]),\n    label = \"\",\n    layout = (4, 1),\n    size = (600,1200)\n    )\n\nsavefig(\"typical-section-solution.svg\") #hide\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For aeroelastic models based on a typical section, we can also easily visualize the section's behavior.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"\n# animation parameters\na = -1/5\nb = 0.5\n\n# create animation\nanim = @animate for t in range(tspan[1], tspan[2], length=200)\n    h, Œ∏ = sol(t, idxs=7:8)\n    xplot, yplot = section_coordinates(h, Œ∏; a, b)\n    plot(xplot, yplot;\n        framestyle = :origin,\n        grid = :false,\n        xlims = (-1.0, 1.0),\n        ylims = (-0.75, 0.75),\n        aspect_ratio = 1.0,\n        label = \"t = $(round(t, digits=1))\")\nend\n\ngif(anim, \"typical-section-simulation.gif\")\n\nnothing #hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(Image: )","category":"page"},{"location":"couplings/steady-section/#[Steady](@ref)-[TypicalSection](@ref)","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady + TypicalSection","text":"","category":"section"},{"location":"couplings/steady-section/#Theory","page":"Steady Thin Airfoil Theory + Typical Section","title":"Theory","text":"","category":"section"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"This model is defined by coupling steady thin airfoil theory aerodynamics","category":"page"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"(Image: )","category":"page"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"with the typical section model.  ","category":"page"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"(Image: )","category":"page"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"By making use of a small angle assumption, the freestream velocity components are defined as","category":"page"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"u approx U_infty \nv approx U_infty theta \nomega approx 0","category":"page"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"where U_infty is the freestream velocity magnitude, theta is the pitch angle, u is the chordwise freestream velocity, v is the normal freestream velocity, and omega is the freestream angular velocity. A small angle assumption is also used to define the lift about the reference location as","category":"page"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"mathcalL approx mathcalN","category":"page"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"where mathcalN is the normal force per unit span at the reference location.","category":"page"},{"location":"couplings/steady-section/#Constructors","page":"Steady Thin Airfoil Theory + Typical Section","title":"Constructors","text":"","category":"section"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"couple_models(aero::Steady, stru::TypicalSection)","category":"page"},{"location":"couplings/steady-section/#Example-Usage","page":"Steady Thin Airfoil Theory + Typical Section","title":"Example Usage","text":"","category":"section"},{"location":"couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"Aeroelastic Analysis of a Typical Section","category":"page"},{"location":"couplings/wagner-section/#[Wagner](@ref)-[TypicalSection](@ref)","page":"Wagner's Function + Typical Section","title":"Wagner + TypicalSection","text":"","category":"section"},{"location":"couplings/wagner-section/#Theory","page":"Wagner's Function + Typical Section","title":"Theory","text":"","category":"section"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"This model is defined by coupling Wagner's function unsteady aerodynamics","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"(Image: )","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"with the typical section model.  ","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"(Image: )","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"To facilitate this coupling, the freestream velocity components u and v are assumed to be aligned with the undeflected chordwise and normal directions, respectively, so that","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"u approx U_infty \nv approx doth \nomega approx dottheta","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"where U_infty is the freestream velocity magnitude, theta is pitch, and h is plunge. To capture the effect of twist on the circulatory lift (since it is no longer implicitly modeled by the fracvu quantity) twist is added to the effective angle of attack from the Wagner's function model so that the effective angle of attack is now given by","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"alpha_texteff = left(theta - fracvu + fracbu left( frac12 - a right) omega - alpha_0 right) phi(0) + fraclambda_1u + fraclambda_2u","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"The original expression for the effective angle of attack may be used by defining the new variable barv = u theta + v such that","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"alpha_texteff = left(-fracbarvu + fracbu left( frac12 - a right) omega - alpha_0 right) phi(0) + fraclambda_1u + fraclambda_2u","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"A small angle assumption is also used to define the lift about the reference location as","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"mathcalL approx mathcalN","category":"page"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"where mathcalN is the normal force per unit span at the reference location.","category":"page"},{"location":"couplings/wagner-section/#Constructors","page":"Wagner's Function + Typical Section","title":"Constructors","text":"","category":"section"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"couple_models(aero::Wagner, stru::TypicalSection)","category":"page"},{"location":"couplings/wagner-section/#Example-Usage","page":"Wagner's Function + Typical Section","title":"Example Usage","text":"","category":"section"},{"location":"couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"Aeroelastic Analysis of a Typical Section","category":"page"},{"location":"#Aeroelasticity.jl","page":"Home","title":"Aeroelasticity.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: ) (Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Modular Multi-Fidelity Aeroelastic Analysis and Simulation Framework","category":"page"},{"location":"","page":"Home","title":"Home","text":"Author: Taylor McDonnell","category":"page"},{"location":"","page":"Home","title":"Home","text":"Aeroelasticity.jl is a modular multi-fidelity aeroelastic analysis and simulation package.  The intent of this package is to facilitate defining and simulating the behavior of both 2D and 3D aeroelastic systems.  Currently, this package only models the aeroelasticity of a two-degree of freedom typical section model, but additional models will be added soon.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Facilitates defining and simulating the behavior of both 2D and 3D aeroelastic systems\nContains a number of predefined aerodynamic, structural, and aeroelastic models including:\nAerodynamic Models \nSteady Thin Airfoil Theory (2D)\nQuasi-Steady Thin Airfoil Theory (2D)\nWagner's Function (2D)\nPeters' Finite State (2D)\nStructural Models\nTwo Degree of Freedom Typical Section Model (2D)\nSupports multiple analysis types including:\nSteady State Analyses\nEigenvalue Analyses\nTime-Marching Analyses\nDirectly interfaces with DifferentialEquations\nVerified/Validated against theoretical, computational, and experimental results (see the examples)\nMay be easily extended to include additional models or model couplings.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Enter the package manager by typing ] and then run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://flow.byu.edu/Aeroelasticity.jl","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the Getting Started section of the documentation.","category":"page"},{"location":"library/public/#Public-Documentation","page":"Public","title":"Public Documentation","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Documentation for Aeroelasticity.jl's public interface.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"See the Models section of the manual for documentation covering the individual models.","category":"page"},{"location":"library/public/#Contents","page":"Public","title":"Contents","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"library/public/#Index","page":"Public","title":"Index","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"library/public/#Public-Interface","page":"Public","title":"Public Interface","text":"","category":"section"},{"location":"library/public/#Getting-Model-Properties","page":"Public","title":"Getting Model Properties","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"The following methods may be used to determine the properties of a model.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"number_of_states\nnumber_of_inputs\nnumber_of_parameters","category":"page"},{"location":"library/public/#Aeroelasticity.number_of_states","page":"Public","title":"Aeroelasticity.number_of_states","text":"number_of_states(model)\n\nReturn the total number of state variables corresponding to a model.\n\n\n\n\n\n","category":"function"},{"location":"library/public/#Aeroelasticity.number_of_inputs","page":"Public","title":"Aeroelasticity.number_of_inputs","text":"number_of_inputs(model)\n\nReturn the total number of inputs corresponding to a model.\n\n\n\n\n\n","category":"function"},{"location":"library/public/#Aeroelasticity.number_of_parameters","page":"Public","title":"Aeroelasticity.number_of_parameters","text":"number_of_parameters(model)\n\nReturn the total number of parameters corresponding to a model.\n\n\n\n\n\n","category":"function"},{"location":"library/public/#Getting-Model-Indices","page":"Public","title":"Getting Model Indices","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"The following methods may be used to find the state, input, and parameter indices associated with each model in a coupled model.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"state_indices\ninput_indices\nparameter_indices","category":"page"},{"location":"library/public/#Aeroelasticity.state_indices","page":"Public","title":"Aeroelasticity.state_indices","text":"state_indices(model::CoupledModel)\n\nReturn the state variable indices for each submodel in model\n\n\n\n\n\n","category":"function"},{"location":"library/public/#Aeroelasticity.input_indices","page":"Public","title":"Aeroelasticity.input_indices","text":"input_indices(model::CoupledModel)\n\nReturn the input variable indices for each submodel in model\n\n\n\n\n\n","category":"function"},{"location":"library/public/#Aeroelasticity.parameter_indices","page":"Public","title":"Aeroelasticity.parameter_indices","text":"parameter_indices(model::CoupledModel)\n\nReturn the parameter indices for each submodel in model\n\n\n\n\n\n","category":"function"},{"location":"library/public/#Getting-Model-Inputs","page":"Public","title":"Getting Model Inputs","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"The following methods may be used to calculate the value of the inputs for a coupled model.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"get_coupling_inputs\nget_coupling_inputs!","category":"page"},{"location":"library/public/#Getting-State-Rates","page":"Public","title":"Getting State Rates","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"The following methods may be used to calculate the value of the state rates for a model.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"get_rates\nget_rates!","category":"page"},{"location":"library/public/#Getting-Mass-Matrices","page":"Public","title":"Getting Mass Matrices","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"The following methods may be used to calculate the mass matrix for a model.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"get_mass_matrix\nget_mass_matrix!","category":"page"},{"location":"library/public/#Getting-Jacobians","page":"Public","title":"Getting Jacobians","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"The following methods may be used to calculate the jacobian of the state rates for a model.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"get_state_jacobian\nget_state_jacobian!","category":"page"},{"location":"library/public/#Performing-a-Stability-Analysis","page":"Public","title":"Performing a Stability Analysis","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"The following method may be used to perform a stability analysis for a model.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"get_eigen","category":"page"},{"location":"library/public/#Aeroelasticity.get_eigen","page":"Public","title":"Aeroelasticity.get_eigen","text":"get_eigen(model::TM, K, M; kwargs...)\n\nReturn the eigenvalues, left eigenvector matrix, and right eigenvector matrix  corresponding to the model.\n\nFor in-place models, the number of eigenvalues to compute may be specified using the nev keyword argument.\n\n\n\n\n\n","category":"function"},{"location":"library/public/#Interfacing-with-DifferentialEquations","page":"Public","title":"Interfacing with DifferentialEquations","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"The following method may be used to construct a function for use with DifferentialEquations.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"get_ode","category":"page"}]
}
