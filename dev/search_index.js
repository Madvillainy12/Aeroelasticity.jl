var documenterSearchIndex = {"docs":
[{"location":"models/couplings/steady-section/#[Steady](@ref)-[Section](@ref)","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady + Section","text":"","category":"section"},{"location":"models/couplings/steady-section/#Type-Definition","page":"Steady Thin Airfoil Theory + Typical Section","title":"Type Definition","text":"","category":"section"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"SteadySection","category":"page"},{"location":"models/couplings/steady-section/#Aeroelasticity.SteadySection","page":"Steady Thin Airfoil Theory + Typical Section","title":"Aeroelasticity.SteadySection","text":"SteadySection\n\nCoupling model for coupling a steady aerodynamic model based on thin airfoil theory (see Steady) and a two-degree of freedom typical section model (see Section).  This model introduces the freestream velocity U_infty, air density rho_infty, and the Prandtl-Glauert compressibility factor beta as  additional parameters.\n\nThe parameters for the resulting coupled model (as defined by the parameter function) defaults to the parameters for each model concatenated into a single vector.\n\n\n\n\n\n","category":"type"},{"location":"models/couplings/steady-section/#Example-Usage","page":"Steady Thin Airfoil Theory + Typical Section","title":"Example Usage","text":"","category":"section"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"Aeroelastic Analysis of a Typical Section\nTime Domain Simulation of a Typical Section ","category":"page"},{"location":"models/couplings/steady-section/#Theory","page":"Steady Thin Airfoil Theory + Typical Section","title":"Theory","text":"","category":"section"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"This model is defined by coupling steady thin airfoil theory aerodynamics","category":"page"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"(Image: )","category":"page"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"with the typical section model.  ","category":"page"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"(Image: )","category":"page"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"By making use of a small angle assumption, the freestream velocity components are defined as","category":"page"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"u approx U_infty \nv approx U_infty theta \nomega approx 0","category":"page"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"where U_infty is the freestream velocity magnitude, theta is the pitch angle, u is the chordwise freestream velocity, v is the normal freestream velocity, and omega is the freestream angular velocity. A small angle assumption is also used to define the lift about the reference location as","category":"page"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"mathcalL approx mathcalN","category":"page"},{"location":"models/couplings/steady-section/","page":"Steady Thin Airfoil Theory + Typical Section","title":"Steady Thin Airfoil Theory + Typical Section","text":"where mathcalN is the normal force per unit span at the reference location.","category":"page"},{"location":"models/couplings/wagner-section/#[Wagner](@ref)-[Section](@ref)","page":"Wagner's Function + Typical Section","title":"Wagner + Section","text":"","category":"section"},{"location":"models/couplings/wagner-section/#Type-Definition","page":"Wagner's Function + Typical Section","title":"Type Definition","text":"","category":"section"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"WagnerSection","category":"page"},{"location":"models/couplings/wagner-section/#Aeroelasticity.WagnerSection","page":"Wagner's Function + Typical Section","title":"Aeroelasticity.WagnerSection","text":"WagnerSection\n\nCoupling model for coupling an unsteady aerodynamic model based on Wagner's function (see Wagner) and a two-degree of freedom typical section model (see Section). This coupling introduces the freestream velocity U_infty, air density rho_infty, and the Prandtl-Glauert compressibility factor beta as additional  parameters.\n\nThe parameters for the resulting coupled model (as defined by the parameter function) defaults to the parameters for each model concatenated into a single vector.\n\n\n\n\n\n","category":"type"},{"location":"models/couplings/wagner-section/#Example-Usage","page":"Wagner's Function + Typical Section","title":"Example Usage","text":"","category":"section"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"Aeroelastic Analysis of a Typical Section\nTime Domain Simulation of a Typical Section","category":"page"},{"location":"models/couplings/wagner-section/#Theory","page":"Wagner's Function + Typical Section","title":"Theory","text":"","category":"section"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"This model is defined by coupling Wagner's function unsteady aerodynamics","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"(Image: )","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"with the typical section model.  ","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"(Image: )","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"To facilitate this coupling, the freestream velocity components u and v are assumed to be aligned with the undeflected chordwise and normal directions, respectively, so that","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"u approx U_infty \nv approx doth \nomega approx dottheta","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"where U_infty is the freestream velocity magnitude, theta is pitch, and h is plunge. To capture the effect of twist on the circulatory lift (since it is no longer implicitly modeled by the fracvu quantity) twist is added to the effective angle of attack from the Wagner's function model so that the effective angle of attack is now given by","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"alpha_texteff = left(theta - fracvu + fracbu left( frac12 - a right) omega - alpha_0 right) phi(0) + fraclambda_1u + fraclambda_2u","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"The original expression for the effective angle of attack may be used by defining the new variable barv = u theta + v such that","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"alpha_texteff = left(-fracbarvu + fracbu left( frac12 - a right) omega - alpha_0 right) phi(0) + fraclambda_1u + fraclambda_2u","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"A small angle assumption is also used to define the lift about the reference location as","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"mathcalL approx mathcalN","category":"page"},{"location":"models/couplings/wagner-section/","page":"Wagner's Function + Typical Section","title":"Wagner's Function + Typical Section","text":"where mathcalN is the normal force per unit span at the reference location.","category":"page"},{"location":"models/couplings/quasisteady-section/#[QuasiSteady](@ref)-[Section](@ref)","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"QuasiSteady + Section","text":"","category":"section"},{"location":"models/couplings/quasisteady-section/#Type-Definition","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Type Definition","text":"","category":"section"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"QuasiSteadySection","category":"page"},{"location":"models/couplings/quasisteady-section/#Aeroelasticity.QuasiSteadySection","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Aeroelasticity.QuasiSteadySection","text":"QuasiSteadySection\n\nCoupling model for coupling a quasi-steady aerodynamic model based on thin airfoil theory (see QuasiSteady) and a two-degree of freedom typical section model (see [Section()]).  This model introduces the freestream velocity U, air density rho, and the Prandtl-Glauert compressibility factor beta as additional  parameters.\n\nThe parameters for the resulting coupled model (as defined by the parameter function) defaults to the parameters for each model concatenated into a single vector.\n\n\n\n\n\n","category":"type"},{"location":"models/couplings/quasisteady-section/#Example-Usage","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Example Usage","text":"","category":"section"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"Aeroelastic Analysis of a Typical Section\nTime Domain Simulation of a Typical Section\nAeroelastic Analysis of the Goland Wing\nSteady State Aeroelastic Analysis of a Highly Flexible Wing\nAeroelastic Stability Analysis of a Highly Flexible Wing","category":"page"},{"location":"models/couplings/quasisteady-section/#Theory","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Theory","text":"","category":"section"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"This model is defined by coupling quasi-steady thin airfoil theory aerodynamics","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"(Image: )","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"with the typical section model.  ","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"(Image: )","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"To facilitate this coupling, the freestream velocity components u and v are assumed to be aligned with the undeflected chordwise and normal directions, respectively, so that","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"u approx U_infty \nv approx doth \nomega approx dottheta","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"where U_infty is the freestream velocity magnitude, theta is pitch, and h is plunge. To capture the effect of twist on the circulatory lift (since it is no longer implicitly modeled by the fracvu quantity) twist is added to the effective angle of attack from the quasi-steady model so that the effective angle of attack is now given by","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"alpha_texteff = theta - fracvu + fracbuleft( frac12 - a right) omega - alpha_0","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"The original expression for the effective angle of attack may be used by defining the new variable barv = u theta + v such that","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"alpha_texteff = -fracbarvu + fracbuleft( frac12 - a right) omega - alpha_0","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"A small angle assumption is also used to define the lift about the reference location as","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"mathcalL approx mathcalN","category":"page"},{"location":"models/couplings/quasisteady-section/","page":"Quasi-Steady Thin Airfoil Theory + Typical Section","title":"Quasi-Steady Thin Airfoil Theory + Typical Section","text":"where mathcalN is the normal force per unit span at the reference location.","category":"page"},{"location":"models/aerodynamics/liftingline/#Lifting-Line-Model","page":"Lifting Line Model","title":"Lifting Line Model","text":"","category":"section"},{"location":"models/aerodynamics/liftingline/#Type-Definition","page":"Lifting Line Model","title":"Type Definition","text":"","category":"section"},{"location":"models/aerodynamics/liftingline/","page":"Lifting Line Model","title":"Lifting Line Model","text":"LiftingLine\nLiftingLineParameters","category":"page"},{"location":"models/aerodynamics/liftingline/#Aeroelasticity.LiftingLine","page":"Lifting Line Model","title":"Aeroelasticity.LiftingLine","text":"LiftingLine{R, Y, I}\n\nLifting line model constructed by concatenating the governing equations, state variables, inputs, and parameters of multiple two-dimensional aerodynamic models.\n\n\n\n\n\n","category":"type"},{"location":"models/aerodynamics/liftingline/#Aeroelasticity.LiftingLineParameters","page":"Lifting Line Model","title":"Aeroelasticity.LiftingLineParameters","text":"LiftingLineParameters(section_parameters)\n\nDefines parameters for a lifting line theory aerodynamic model.\n\n\n\n\n\n","category":"function"},{"location":"models/aerodynamics/liftingline/#Theory","page":"Lifting Line Model","title":"Theory","text":"","category":"section"},{"location":"models/aerodynamics/liftingline/","page":"Lifting Line Model","title":"Lifting Line Model","text":"This model is a three dimensional aerodynamic model which is constructed by concatenating the governing equations, states, inputs, and parameters of an arbitrary number of two-dimensional aerodynamic models.","category":"page"},{"location":"models/aerodynamics/liftingline/#Examples","page":"Lifting Line Model","title":"Examples","text":"","category":"section"},{"location":"models/aerodynamics/liftingline/","page":"Lifting Line Model","title":"Lifting Line Model","text":"Aeroelastic Analysis of the Goland Wing\nAeroelastic Analysis of a High Aspect Ratio Wing\nAeroelastic Analysis of a High Aspect Ratio Wing","category":"page"},{"location":"models/couplings/peters-section/#[Peters](@ref)-[Section](@ref)","page":"Peters' Finite State + Typical Section","title":"Peters + Section","text":"","category":"section"},{"location":"models/couplings/peters-section/#Type-Definition","page":"Peters' Finite State + Typical Section","title":"Type Definition","text":"","category":"section"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"PetersSection","category":"page"},{"location":"models/couplings/peters-section/#Aeroelasticity.PetersSection","page":"Peters' Finite State + Typical Section","title":"Aeroelasticity.PetersSection","text":"PetersSection{N}\n\nCoupling model for coupling Peters' finite state theory (see Peters) with a typical section model (see Section).  This model introduces the freestream velocity U, air density rho, and the Prandtl-Glauert compressibility factor  beta as additional parameters.\n\nThe parameters for the resulting coupled model (as defined by the parameter function) defaults to the parameters for each model concatenated into a single vector.\n\n\n\n\n\n","category":"type"},{"location":"models/couplings/peters-section/#Example-Usage","page":"Peters' Finite State + Typical Section","title":"Example Usage","text":"","category":"section"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"Aeroelastic Analysis of a Typical Section\nTime Domain Simulation of a Typical Section","category":"page"},{"location":"models/couplings/peters-section/#Theory","page":"Peters' Finite State + Typical Section","title":"Theory","text":"","category":"section"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"This model is defined by coupling Peter's finite state model","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"(Image: )","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"with the typical section model.  ","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"(Image: )","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"To facilitate this coupling, the freestream velocity components u and v are assumed to be aligned with the undeflected chordwise and normal directions, respectively, so that","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"u approx U_infty \nv approx doth \nomega approx dottheta","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"where U_infty is the freestream velocity magnitude, theta is pitch, and h is plunge. To capture the effect of twist on the circulatory lift (since it is no longer implicitly modeled by the fracvu quantity) twist is added to the effective angle of attack from Peter's finite state model so that the effective angle of attack is now given by","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"alpha_texteff = theta - fracvu + fracbuleft( frac12 - a right) omega  + fraclambda_0u - alpha_0","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"The original expression for the effective angle of attack may be used by defining the new variable barv = u theta + v such that","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"alpha_texteff = -fracbarvu + fracbuleft( frac12 - a right) omega + fraclambda_0u - alpha_0","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"A small angle assumption is also used to define the lift about the reference location as","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"mathcalL approx mathcalN","category":"page"},{"location":"models/couplings/peters-section/","page":"Peters' Finite State + Typical Section","title":"Peters' Finite State + Typical Section","text":"where mathcalN is the normal force per unit span at the reference location.","category":"page"},{"location":"models/couplings/liftingline-gxbeam/#[LiftingLine](@ref)-[GXBeamAssembly](@ref)","page":"Lifting Line + Geometrically Exact Beam Theory","title":"LiftingLine + GXBeamAssembly","text":"","category":"section"},{"location":"models/couplings/liftingline-gxbeam/#Type-Definition","page":"Lifting Line + Geometrically Exact Beam Theory","title":"Type Definition","text":"","category":"section"},{"location":"models/couplings/liftingline-gxbeam/","page":"Lifting Line + Geometrically Exact Beam Theory","title":"Lifting Line + Geometrically Exact Beam Theory","text":"LiftingLineGXBeamAssembly\nLiftingLineGXBeamParameters","category":"page"},{"location":"models/couplings/liftingline-gxbeam/#Aeroelasticity.LiftingLineGXBeamAssembly","page":"Lifting Line + Geometrically Exact Beam Theory","title":"Aeroelasticity.LiftingLineGXBeamAssembly","text":"LiftingLineGXBeamAssembly()\n\nConstruct a model by coupling a lifting line aerodynamic model and a geometrically exact beam theory model (as implemented by GXBeam).  Parameters for this model are defined in LiftingLineGXBeamParameters.\n\nNOTE: When using this model, the local frame for each beam element is assumed to be oriented with the x-axis along the beam's axis, the y-axis forward (into the freestream), and the z-axis in the airfoil normal direction.\n\n\n\n\n\n","category":"type"},{"location":"models/couplings/liftingline-gxbeam/#Aeroelasticity.LiftingLineGXBeamParameters","page":"Lifting Line + Geometrically Exact Beam Theory","title":"Aeroelasticity.LiftingLineGXBeamParameters","text":"LiftingLineGXBeamParameters(Vinf, rho, beta; kwargs...)\n\nDefines parameters for a lifting line model coupled with a geometrically exact beam theory structural model when subjected to a the freestream velocity vector Vinf.\n\nArguments\n\nVinf: Freestream velocity vector\nrho: Air density\nbeta: Prandtl-Glauert compressibility factor beta = sqrt1 - M^2\n\nKeyword Arguments\n\nprescribed_conditions = Dict{Int,PrescribedConditions{Float64}}():      A dictionary with keys corresponding to the points at      which prescribed conditions are applied and values of type      PrescribedConditions which describe the prescribed conditions      at those points.\ndistributed_loads = Dict{Int,DistributedLoads{Float64}}(): A dictionary      with keys corresponding to the elements to which distributed loads are      applied and values of type DistributedLoads which describe      the distributed loads on those elements.\npoint_masses = Dict{Int,PointMass{Float64}}(): A dictionary with keys      corresponding to the points to which point masses are attached and values      of type PointMass which contain the properties of the attached      point masses.\nlinear_velocity = zeros(3): Prescribed linear velocity of the body frame.\nangular_velocity = zeros(3): Prescribed angular velocity of the body frame.\nlinear_acceleration = zeros(3): Prescribed linear acceleration of the body frame.\nangular_acceleration = zeros(3): Prescribed angular acceleration of the body frame.\ngravity = [0,0,0]: Gravity vector in the body frame.\n\n\n\n\n\n","category":"function"},{"location":"models/couplings/liftingline-gxbeam/#Example-Usage","page":"Lifting Line + Geometrically Exact Beam Theory","title":"Example Usage","text":"","category":"section"},{"location":"models/couplings/liftingline-gxbeam/","page":"Lifting Line + Geometrically Exact Beam Theory","title":"Lifting Line + Geometrically Exact Beam Theory","text":"Aeroelastic Analysis of the Goland Wing\nSteady State Aeroelastic Analysis of a Highly Flexible Wing\nAeroelastic Stability Analysis of a Highly Flexible Wing","category":"page"},{"location":"models/couplings/liftingline-gxbeam/#Theory","page":"Lifting Line + Geometrically Exact Beam Theory","title":"Theory","text":"","category":"section"},{"location":"models/couplings/liftingline-gxbeam/","page":"Lifting Line + Geometrically Exact Beam Theory","title":"Lifting Line + Geometrically Exact Beam Theory","text":"This model is defined by coupling the lifting line aerodynamics model with the geometrically exact beam theory model.","category":"page"},{"location":"models/structures/rigidbody/#Rigid-Body-Model","page":"Rigid Body","title":"Rigid Body Model","text":"","category":"section"},{"location":"models/structures/rigidbody/#Type-Definition","page":"Rigid Body","title":"Type Definition","text":"","category":"section"},{"location":"models/structures/rigidbody/","page":"Rigid Body","title":"Rigid Body","text":"RigidBody","category":"page"},{"location":"models/structures/rigidbody/#Aeroelasticity.RigidBody","page":"Rigid Body","title":"Aeroelasticity.RigidBody","text":"RigidBody(state_indices=(), rate_indices=(), prescribed_values=())\n\nConstruct a six-degree of freedom rigid-body model with state variables xr yr zr phi theta psi ur vr wr pr qr rr and inputs m I_xx I_yy I_zz I_xz I_xy I_yz F_x F_y F_z M_x M_y M_z.  Uses the state  variables corresponding to state_indices to set the state rates corresponding to rate_indices to the values specified in prescribed_values. Otherwise, allow the state  variables and their respective rates to be defined by their rate equations.\n\n\n\n\n\n","category":"type"},{"location":"models/structures/rigidbody/#Theory","page":"Rigid Body","title":"Theory","text":"","category":"section"},{"location":"models/structures/rigidbody/","page":"Rigid Body","title":"Rigid Body","text":"A basic six degree of freedom rigid body model based on the SixDOF package.","category":"page"},{"location":"models/couplings/liftingline-rigidbody/#[LiftingLine](@ref)-[RigidBody](@ref)","page":"Lifting Line + Rigid Body","title":"LiftingLine + RigidBody","text":"","category":"section"},{"location":"models/couplings/liftingline-rigidbody/#Type-Definition","page":"Lifting Line + Rigid Body","title":"Type Definition","text":"","category":"section"},{"location":"models/couplings/liftingline-rigidbody/","page":"Lifting Line + Rigid Body","title":"Lifting Line + Rigid Body","text":"LiftingLineRigidBody\nLiftingLineRigidBodyParameters","category":"page"},{"location":"models/couplings/liftingline-rigidbody/#Aeroelasticity.LiftingLineRigidBody","page":"Lifting Line + Rigid Body","title":"Aeroelasticity.LiftingLineRigidBody","text":"LiftingLineRigidBody()\n\nConstruct a model by coupling a lifting line aerodynamic model and a rigid body dynamics  model. Parameters for this model are defined in LiftingLineRigidBodyParameters.\n\nNOTE: When using this model, the local frame for each lifting line element is assumed to be oriented with the x-axis in the chordwise direction, the y-axis in the spanwise  direction (e.g. out the right wing), and the z-axis in the airfoil normal direction.\n\nNOTE: This model does not define a default parameter function for the coupled model\n\n\n\n\n\n","category":"type"},{"location":"models/couplings/liftingline-rigidbody/#Theory","page":"Lifting Line + Rigid Body","title":"Theory","text":"","category":"section"},{"location":"models/couplings/liftingline-rigidbody/","page":"Lifting Line + Rigid Body","title":"Lifting Line + Rigid Body","text":"This model is defined by coupling the lifting line aerodynamics model with the rigid body model.","category":"page"},{"location":"models/structures/section/#typical-section-model","page":"Typical Section","title":"Typical Section Model","text":"","category":"section"},{"location":"models/structures/section/","page":"Typical Section","title":"Typical Section","text":"(Image: )","category":"page"},{"location":"models/structures/section/#Type-Definition","page":"Typical Section","title":"Type Definition","text":"","category":"section"},{"location":"models/structures/section/","page":"Typical Section","title":"Typical Section","text":"Section\nSection()","category":"page"},{"location":"models/structures/section/#Aeroelasticity.Section","page":"Typical Section","title":"Aeroelasticity.Section","text":"Section\n\nTypical section structural model with state variables h theta doth dottheta, inputs mathcalL mathcalM, and parameters k_h k_theta m S_theta I_theta\n\n\n\n\n\n","category":"type"},{"location":"models/structures/section/#Aeroelasticity.Section-Tuple{}","page":"Typical Section","title":"Aeroelasticity.Section","text":"Section()\n\nInitialize a model of type Section\n\n\n\n\n\n","category":"method"},{"location":"models/structures/section/#Examples","page":"Typical Section","title":"Examples","text":"","category":"section"},{"location":"models/structures/section/","page":"Typical Section","title":"Typical Section","text":"Aeroelastic Analysis of a Typical Section\nTime Domain Simulation of a Typical Section","category":"page"},{"location":"models/structures/section/#Theory","page":"Typical Section","title":"Theory","text":"","category":"section"},{"location":"models/structures/section/","page":"Typical Section","title":"Typical Section","text":"The equations of motion for this model are:","category":"page"},{"location":"models/structures/section/","page":"Typical Section","title":"Typical Section","text":"beginbmatrix m  S_theta  S_theta  I_theta endbmatrix\nbeginbmatrix ddoth  ddottheta endbmatrix +\nbeginbmatrix k_h  0  0  k_h endbmatrix\nbeginbmatrix h  theta endbmatrix =\nbeginbmatrix -mathcalL  mathcalM endbmatrix","category":"page"},{"location":"models/structures/section/","page":"Typical Section","title":"Typical Section","text":"where k_h is the linear spring constant, k_theta is the torsional spring constant, m is the mass per unit span, S_theta is the structural imbalance, I_theta is the mass moment of inertia, mathcalL is the lift per unit span, and mathcalM is the moment per unit span.","category":"page"},{"location":"models/aerodynamics/steady/#steady-theory","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"","category":"section"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"(Image: )","category":"page"},{"location":"models/aerodynamics/steady/#Type-Definition","page":"Steady Thin Airfoil Theory","title":"Type Definition","text":"","category":"section"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Steady\nSteady()","category":"page"},{"location":"models/aerodynamics/steady/#Aeroelasticity.Steady","page":"Steady Thin Airfoil Theory","title":"Aeroelasticity.Steady","text":"Steady\n\nTwo-dimensional aerodynamic model based on steady thin airfoil theory with parameters  a b a_0 alpha_0 c_d0 c_m0.\n\n\n\n\n\n","category":"type"},{"location":"models/aerodynamics/steady/#Aeroelasticity.Steady-Tuple{}","page":"Steady Thin Airfoil Theory","title":"Aeroelasticity.Steady","text":"Steady()\n\nInitialize a model of type Steady\n\n\n\n\n\n","category":"method"},{"location":"models/aerodynamics/steady/#Examples","page":"Steady Thin Airfoil Theory","title":"Examples","text":"","category":"section"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Aeroelastic Analysis of a Typical Section\nTime Domain Simulation of a Typical Section\nAeroelastic Analysis of the Goland Wing\nSteady State Aeroelastic Analysis of a Highly Flexible Wing\nAeroelastic Stability Analysis of a Highly Flexible Wing","category":"page"},{"location":"models/aerodynamics/steady/#Theory","page":"Steady Thin Airfoil Theory","title":"Theory","text":"","category":"section"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"This model is a two-dimensional aerodynamic model which is based on the results of steady thin airfoil theory.  As it is a steady state model, it does not have any state varables or rate equations.  In other words, this model assumes that aerodynamic forces instantaneously assume their steady state values.","category":"page"},{"location":"models/aerodynamics/steady/#Normal-and-Axial-Forces","page":"Steady Thin Airfoil Theory","title":"Normal and Axial Forces","text":"","category":"section"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"The lift coefficient of an airfoil according to thin airfoil theory is given by a_0 (alpha - alpha_0), where a_0 = 2pi is the airfoil's lift slope, alpha is the airfoil's angle of attack, and alpha_0 is the airfoil's zero lift angle of attack. Dimensionalized, this lift force is","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalL = a_0 rho_infty b U_infty^2 (alpha - alpha_0)","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"where rho_infty is the freestream air density, b is the semi-chord, and U_infty is the freestream velocity.","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"The lift force may be expressed in terms of normal and axial components as","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b U_infty^2 (alpha - alpha_0) cos(alpha) \nmathcalA = -a_0 rho_infty b U_infty^2 (alpha - alpha_0) sin(alpha)","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Using the substitutions","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"cos(alpha) = fracuU_infty quad sin(alpha) = fracvU_infty","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"where u is the tangential velocity and v is the normal velocity leads to the following expressions for the normal and axial forces","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b U_infty u (alpha - alpha_0) \nmathcalA = -a_0 rho_infty b U_infty v (alpha - alpha_0)","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Using a small angle approximation allows us to assume alpha approx sin(alpha) = fracvU_infty, which allows us to reduce our expressions for the normal and axial force to","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b u (v - U_infty alpha_0) \nmathcalA = -a_0 rho_infty b v (v - U_infty alpha_0)","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"If we further assume that u  v (which is reasonable considering our small angle assumption) then","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"U_infty = sqrtu^2 + v^2 approx = u","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"and the expressions for the normal and axial force further reduce to","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b u^2 alpha_texteff \nmathcalA = -a_0 rho_infty b u v alpha_texteff","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"where alpha_texteff is the effective angle of attack, defined for this model as","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"alpha_texteff = fracvu - alpha_0","category":"page"},{"location":"models/aerodynamics/steady/#Pitching-Moment","page":"Steady Thin Airfoil Theory","title":"Pitching Moment","text":"","category":"section"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"Thin airfoil theory may be used to show that the airfoil quarter chord is the theoretical location of the aerodynamic center.  It may also be used to derive pitching moment coefficients for various airfoil shapes.  To accomodate multiple airfoil shapes, we introduce the quarter-chord moment coefficient c_m_0 as an additional parameter.  Using this coefficient, the pitching moment at a location a b aft of the airfoil mid-chord may be defined as","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalM = 2 rho b^2 u^2 c_m_0 + b left(frac12 + a right) mathcalN","category":"page"},{"location":"models/aerodynamics/steady/#Compressibility-Correction","page":"Steady Thin Airfoil Theory","title":"Compressibility Correction","text":"","category":"section"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"At this point, a compressibility correction may be applied to the results of thin airfoil theory in order to extend their applicability.  Applying a Prandtl-Glauert compressibility correction, the normal force, axial force, and pitching moment become","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalN_textcompressible = fracmathcalNbeta \nmathcalA_textcompressible = fracmathcalAbeta \nmathcalM_textcompressible = fracmathcalMbeta","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"where beta=sqrt1 - M^2 is the Prandtl-Glauert factor, which is a function of the local section Mach number M.","category":"page"},{"location":"models/aerodynamics/steady/#Viscous-Forces","page":"Steady Thin Airfoil Theory","title":"Viscous Forces","text":"","category":"section"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"After the Prandtl-Glauert compressibility correction has been applied, an extra force in the axial direction mathcalF_v may be added to account for viscous forces.  The magnitude of this force is scaled using the c_d_0 coefficient.","category":"page"},{"location":"models/aerodynamics/steady/","page":"Steady Thin Airfoil Theory","title":"Steady Thin Airfoil Theory","text":"mathcalF_v = ρ b u^2 c_d_0","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"EditURL = \"https://github.com/byuflowlab/Aeroelasticity.jl/blob/main/docs/src/literate/section-stability.jl\"","category":"page"},{"location":"examples/section-stability/#section-stability","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"","category":"section"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"In this example, we perform a two-dimensional aeroelastic analysis for a two degree of freedom typical section model.","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"(Image: )","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"tip: Tip\nThis example is also available as a Jupyter notebook: section-stability.ipynb.","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"The equations of motion for this model are","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"m left(ddoth+b x_theta ddottheta right) + k_h h = -L \nI_theta ddottheta + m b x_theta ddoth + k_theta = M","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"where b is the semichord length, k_h is the linear spring constant, k_theta is the torsional spring constant, m is the mass per unit span, x_theta is the distance to the center of mass from the reference point, I_θ is the moment of inertia about the reference point, L is the lift per unit span, and M is the moment per unit span about the reference point.  To learn more about how this model is implemented in this package, see Section.","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"This package has a number of pre-implemented aerodynamic models which may be used to model the aerodynamics of the typical section model.  These models include a steady-state thin airfoil theory model (see Steady), a quasi-steady thin airfoil theory model (see QuasiSteady), an unsteady aerodynamic model based on Wagner's function (see Wagner), and Peters' finite state aerodynamic model (see Peters).  We will perform aeroelastic analyses using each of these models and compare the results.","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"The non-dimensional parameters we will use are","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"a = -15 quad e = -110  \nr^2 = fracI_Pm b^2 quad sigma = fracomega_homega_theta \nmu = fracmrho_infty pi b^2 quad V = fracUb omega_theta","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"where a is the normalized distance from the semichord to the reference point, e is the normalized distance from the semichord to the center of mass, and omega_h and omega_theta are the uncoupled natural frequencies, defined as","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"omega_h = sqrtfrack_hm quad omega_theta = sqrtfrack_thetaI_P","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"using Aeroelasticity, DifferentialEquations, LinearAlgebra\n\n# define non-dimensional parameters\nV = range(1e-6, 3.1, length=25) # = U/(b*ωθ) (reduced velocity)\na = -1/5 # reference point normalized location\ne = -1/10 # center of mass normalized location\nμ = 20 # = m/(ρ*pi*b^2) (mass ratio)\nr2 = 6/25 # = Iθ/(m*b^2) (radius of gyration about P)\nσ = 2/5 # = ωh/ωθ (natural frequency ratio)\nxθ = e - a # distance from center of mass to reference point\na0 = 2*pi # lift curve slope\nα0 = 0 # zero lift angle\ncd0 = 0 # drag coefficient\ncm0 = 0 # moment coefficient\n\n# choose dimensional parameters\nb = 1 # semichord\nρ = 1 # air density\nωθ = 1 # pitch natural frequency\nc = 343 # air speed of sound\n\n# calculate dimensionalized parameters\nU = V*b*ωθ # freestrean velocity\nm = μ*ρ*pi*b^2 # mass\nSθ = m*xθ*b # mass imbalance\nIθ = r2*m*b^2 # inertia\nωh = σ*ωθ # plunge natural frequency\nkh = m*ωh^2 # plunge spring constant\nkθ = Iθ*ωθ^2 # pitch spring constant\n\n# define submodels\nsteady_submodels = (Steady(), Section())\nquasisteady_submodels = (QuasiSteady(), Section())\nwagner_submodels = (Wagner(), Section())\npeters_submodels = (Peters{6}(), Section())\n\n# define default parameters (for determining jacobian sparsity)\nparameters = [a, b, a0, α0, cd0, cm0, kh, kθ, m, Sθ, Iθ, U[1], ρ, c]\n\n# define coupled model for each analysis\nmodels = (\n    CoupledModel(steady_submodels, parameters),\n    CoupledModel(quasisteady_submodels, parameters),\n    CoupledModel(wagner_submodels, parameters),\n    CoupledModel(peters_submodels, parameters)\n)\n\n# initialize eigenvalue/eigenvector storage\nλ = Vector{Matrix{ComplexF64}}(undef, length(models))\nUλ = Vector{Array{ComplexF64,3}}(undef, length(models))\nVλ = Vector{Array{ComplexF64,3}}(undef, length(models))\n\n# perform an analysis for each aerodynamic model\nfor (imodel, model) in enumerate(models)\n\n    # initialize eigenvalue/eigenvector storage\n    nλ = number_of_states(model)\n    λ[imodel] = zeros(ComplexF64, nλ, length(V))\n    Uλ[imodel] = zeros(ComplexF64, nλ, nλ, length(V))\n    Vλ[imodel] = zeros(ComplexF64, nλ, nλ, length(V))\n\n    # loop through each reduced frequency\n    for i = 1:length(V)\n\n        # construct parameter vector\n        p = [a, b, a0, α0, cd0, cm0, kh, kθ, m, Sθ, Iθ, U[i], ρ, c]\n\n        # define an ODEFunction for this model\n        f = ODEFunction(model, p)\n\n        # define initial guess for the equilibrium states\n        x0 = zeros(number_of_states(model))\n\n        # find equilibrium point\n        x = solve(SteadyStateProblem(f, x0, p))\n\n        # linearize about the equilibrium point\n        K, M = linearize(model, x, p)\n\n        # perform linear stability analysis\n        λi, Uλi, Vλi = dense_eigen(K, M)\n\n        # correlate eigenvalues\n        if i > 1\n            # previous left eigenvector matrix\n            Uλpi = Uλ[imodel][:,:,i-1]\n\n            # use correlation matrix to correlate eigenmodes\n            perm, corruption = Aeroelasticity.correlate_eigenmodes(Uλpi, M, Vλi)\n\n            # re-arrange eigenmodes\n            λi = λi[perm]\n            Uλi = Uλi[perm,:]\n            Vλi = Vλi[:,perm]\n        end\n\n        # save eigenvalues/eigenvectors\n        λ[imodel][:,i] = λi\n        Uλ[imodel][:,:,i] = Uλi\n        Vλ[imodel][:,:,i] = Vλi\n    end\nend\n\nnothing #hide","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"We now plot the results for each aerodynamic model.","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"using Plots\npyplot()\n\nsp1 = plot(\n    title = \"Non-Dimensional Frequency\",\n    xlim = (0,3.1),\n    xtick = 0.0:0.5:3.0,\n    xlabel = \"\\$ \\\\frac{U}{b \\\\omega_\\\\theta} \\$\",\n    ylim = (0, 1.05),\n    ytick = 0.0:0.2:1.0,\n    ylabel = \"\\$ \\\\frac{\\\\Omega}{\\\\omega_\\\\theta} \\$\",\n    titlefontsize = 10,\n    guidefontsize = 10,\n    legendfontsize = 8,\n    tickfontsize = 9,\n    foreground_color_legend = nothing,\n    background_color_legend = nothing,\n    minorgrid=false\n    )\n\nsp2 = plot(\n    title = \"Non-Dimensional Damping\",\n    xlim = (0,3.1),\n    xtick = 0.0:0.5:3.0,\n    xlabel = \"\\$ \\\\frac{U}{b \\\\omega_\\\\theta} \\$\",\n    ylim = (-0.7, 0.605),\n    ytick = -0.6:0.2:0.6,\n    ylabel = \"\\$ \\\\frac{Γ}{\\\\omega_\\\\theta} \\$\",\n    framestyle = :zerolines,\n    titlefontsize = 10,\n    guidefontsize = 10,\n    legendfontsize = 8,\n    tickfontsize = 9,\n    legend = :topleft,\n    foreground_color_legend = nothing,\n    background_color_legend = nothing,\n    minorgrid = false\n    )\n\nlabels = [\"Steady\", \"Quasi-Steady\", \"Wagner\", \"Peters (N=6)\"]\n\nfor ia = 1:length(models)\n\n    plot!(sp1, V, imag.(λ[ia][1,:])/ωθ,\n        label = labels[ia],\n        color = ia,\n        markersize = 1,\n        markerstrokewidth = 0,\n        )\n\n    for i = 2:size(λ[ia], 1)\n        plot!(sp1, V, imag.(λ[ia][i,:])/ωθ,\n            label = \"\",\n            color = ia,\n            markersize = 1,\n            markerstrokewidth = 0,\n            )\n    end\n\n    plot!(sp2, V, real.(λ[ia][1,:])/ωθ,\n        label = labels[ia],\n        color = ia,\n        markersize = 1,\n        markerstrokewidth = 0,\n        )\n\n    for i = 2:size(λ[ia], 1)\n        plot!(sp2, V, real.(λ[ia][i,:])/ωθ,\n            label = \"\",\n            color = ia,\n            markersize = 1,\n            markerstrokewidth = 0,\n            )\n    end\nend\n\np1 = plot(sp1, sp2, layout = (1, 2), size = (800, 300))\n\nsavefig(p1, \"../assets/section-stability.svg\") #hide\nnothing #hide","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"(Image: )","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"Using the Wagner or Peters aerodynamic models yields a flutter reduced velocity around 2.2, while the Steady and QuasiSteady aerodynamic models predict significantly lower flutter velocities.  The aerodynamic state variables of the Wagner and Peters models allows these models to capture the impact of vortex shedding on the lift and drag of the profile, therefore we can expect these models to yield more accurate results than the Steady and QuasiSteady models.","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"The non-dimensional parameters we use for this example match those used by Hodges and Pierce in \"Introduction to Structural Dynamics and Aeroelasticity\".  Hodges and Pierce performed the analysis using a steady-state model and Peter's finite state model with six state variables.   The results presented here for the steady-state and Peters' finite state models match the results presented by Hodges and Pierce in \"Introduction to Structural Dynamics and Aeroelasticity\", which provides a verification for our implementation of these models.  Additionally, since the flutter speed predicted by the Wagner and  Peters models match, we can be reasonably confident that the Wagner unsteady aerodynamic model is also implemented correctly.","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"","category":"page"},{"location":"examples/section-stability/","page":"Aeroelastic Analysis of a Typical Section","title":"Aeroelastic Analysis of a Typical Section","text":"This page was generated using Literate.jl.","category":"page"},{"location":"guide/#guide","page":"Guide","title":"Getting Started","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"The governing equations for many unsteady systems may be described by the first-order implicit differential equation","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"   0 = bmf(bmdotx bmx bmy bmp t)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"where bmf is a vector-valued residual function, dot() denotes the time derivative, bmx is a vector of state variables, bmy is a vector of time-varying inputs, bmp is a vector of time-invariant parameters, and t is the current time. If we concatenate the governing equations associated with any number of unsteady models described by this equation together, we obtain the concatenated model","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"bm0 = bmmathcalF(bmdotX bmX bmY bmP t)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"where","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"bmmathcalF = beginbmatrix\nbmf_1 \nbmf_2 \nvdots \nbmf_n\nendbmatrix quad\nbmX = beginbmatrix\nbmx_1 \nbmx_2 \nvdots \nbmx_n\nendbmatrix quad\nbmY = beginbmatrix\nbmy_1 \nbmy_2 \nvdots \nbmy_n\nendbmatrix quad\nbmP = beginbmatrix\nbmp_1 \nbmp_2 \nvdots \nbmp_n\nendbmatrix","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"The concatenated model is a decoupled model, since the states, inputs, and parameters of each submodel are not influenced in any way by the states, inputs, and parameters of the other submodels. To couple these models, we introduce the following coupling function, which defines the inputs of the concatenated model as functions of its rates, states, and parameters, as well as the current time.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"bmy = bmmathcalG(bmdotX bmX bmP t)","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Defining this coupling function allows us to define the governing equations for a general monolithic coupled model.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"bmtildemathcalF(bmdotX bmX bmP t) = bmmathcalF(bmdotX bmX bmmathcalG(bmdotX bmX bmP t) bmP t) = bm0","category":"page"},{"location":"guide/#Implementation","page":"Guide","title":"Implementation","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"Our coupling methodology is implemented by the following CoupledModel constructor.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"CoupledModel(submodels, parameters)","category":"page"},{"location":"guide/#Aeroelasticity.CoupledModel-Tuple{Any, Any}","page":"Guide","title":"Aeroelasticity.CoupledModel","text":"CoupledModel(submodels, parameters, nstate=number_of_states.(submodels); kwargs...)\n\nDefine a coupled model from a collection of submodels.  Each submodel is defined as an in-place implicit differential equation (i.e. submodels[i](residᵢ, dxᵢ, xᵢ, yᵢ, pᵢ, t)).\n\nGeneral Keyword Arguments\n\nfinput = default_coupling(submodels...): Coupling function for the combined system.  Has the function signature: y₁, y₂, ... yₙ = finput(dxᵢ, xᵢ, pᵢ, t).  Default coupling  functions are defined for various combinations of built-in models.\nfparam = default_parameter_function(finput): Parameter function for the coupled system.  Has the function signature: p₁, p₂, ... pₙ, pₐ = fparam(p, t)\n\nKeyword Arguments for Automatically Determining Jacobian Sparsity\n\nneval=3: Total number of evaluation points (for computing jacobian properties)\ndx0=[rand(sum(nstate) for ieval = 1:neval]: Evaluation point rates\nx0=[rand(sum(nstate) for ieval = 1:neval]: Evaluation point states\np0=fill(default_parameters(finput), neval): Evaluation point parameters\nt0=[rand() for ieval=1:neval]: Evaluation point times\nsymbolic=true: Symbolically find jacobian sparsity?\nautodiff=true: Use automatic differentiation to evaluate jacobians?\nfdtype=Val(:forward): Finite differencing type to use if autodiff=false\nztol=nothing: Tolerance for determining jacobian sparsity (the default includes structural zeros)\natol=0.0: Absolute tolerance for determining rate jacobian properties (see isapprox)\nrtol=0.0: Relative tolerance for determining rate jacobian properties (see isapprox)\n\nKeyword Arguments for Providing Jacobian Sparsity (and other properties)\n\nrate_jacobian_sparsity=nothing: Coupled system rate jacobian sparsity\nstate_jacobian_sparsity=nothing: Coupled system state jacobian sparsity\nrate_jacobian_colorvec=nothing: Coupled system rate jacobian color vector\nstate_jacobian_colorvec=nothing: Coupled system state jacobian color vector\nidentity_mass_matrix=nothing: Indicates whether the mass matrix is the identity matrix\nconstant_mass_matrix=nothing: Indicates whether the mass matrix does not change.  Note  that when neval=1 this property defaults to false unless identity_mass_matrix==true\nmass_matrix=spzeros(sum(nstate),sum(nstate)): Storage for the mass matrix.  Note that  this matrix is only used if constant_mass_matrix=true\n\n\n\n\n\n","category":"method"},{"location":"guide/","page":"Guide","title":"Guide","text":"In addition to constructing a coupled model, this constructor automatically detects the sparsity of the resulting rate and state jacobian matrices.  This information is then used when evaluating the following jacobian evaluation functions.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"rate_jacobian!\nstate_jacobian!","category":"page"},{"location":"guide/#Aeroelasticity.rate_jacobian!","page":"Guide","title":"Aeroelasticity.rate_jacobian!","text":"rate_jacobian!(jacob, coupled_model, dx, x, p, t; kwargs...)\n\nCompute the jacobian of the residual with respect to the state rates.\n\n\n\n\n\n","category":"function"},{"location":"guide/#Aeroelasticity.state_jacobian!","page":"Guide","title":"Aeroelasticity.state_jacobian!","text":"state_jacobian!(jacob, coupled_model, dx, x, p, t; kwargs...)\n\nCompute the jacobian of the residual with respect to the state rates.\n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"The residual may be evaluated using the following function","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"residual!","category":"page"},{"location":"guide/#Aeroelasticity.residual!","page":"Guide","title":"Aeroelasticity.residual!","text":"residual!(resid, coupled_model, dx, x, p, t)\n\nCompute the residual for a coupled model.\n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"Alternatively, the residual may be evaluated by calling the coupled model as a function.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"(coupled_model::CoupledModel)(resid, dx, x, p, t)","category":"page"},{"location":"guide/#Analyses","page":"Guide","title":"Analyses","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"Once a coupled model has been constructed, the system may be linearized using the linearize function.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"linearize","category":"page"},{"location":"guide/#Aeroelasticity.linearize","page":"Guide","title":"Aeroelasticity.linearize","text":"linearize(model, x, p; autodiff=true, fdtype=Val(:forward))\nlinearize(model, dx, x, p, t; autodiff=true, fdtype=Val(:forward))\n\nCalculate the jacobian of the residual function for coupled model model with respect to the state variables and their rates.\n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"Eigenvalues and eigenvectors may then be computed using the dense_eigen or sparse_eigen functions.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"dense_eigen\nsparse_eigen","category":"page"},{"location":"guide/#Aeroelasticity.dense_eigen","page":"Guide","title":"Aeroelasticity.dense_eigen","text":"dense_eigen(K, M; kwargs...)\n\nReturn the eigenvalues, left eigenvector matrix, and right eigenvector matrix corresponding to the model.\n\n\n\n\n\n","category":"function"},{"location":"guide/#Aeroelasticity.sparse_eigen","page":"Guide","title":"Aeroelasticity.sparse_eigen","text":"sparse_eigen(K, M; nev=min(20, size(K,1)))\n\nReturn the eigenvalues, left eigenvector matrix, and right eigenvector matrix corresponding to the model. nev is the number of eigenvalues to compute\n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"Correlating eigenmodes with modes from previous iterations may be done using the correlate_eigenmodes function","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"correlate_eigenmodes","category":"page"},{"location":"guide/#Aeroelasticity.correlate_eigenmodes","page":"Guide","title":"Aeroelasticity.correlate_eigenmodes","text":"correlate_eigenmodes(U, M, V; tracked_modes=1:size(U,1), rtol=1e-3, atol=1e-3)\n\nCorrelate modes from a current iteration with those from a previous iteration. Returns a permutation that may be used to reorder the new modes and the associated corruption indices.\n\n\n\n\n\n","category":"function"},{"location":"guide/","page":"Guide","title":"Guide","text":"DifferentialEquations may be used to  find a steady state or time marching solution.  To facilitate these analyses, this package  provides the following specialized constructors for ODEFunction and DAEFunction.","category":"page"},{"location":"guide/","page":"Guide","title":"Guide","text":"Aeroelasticity.SciMLBase.ODEFunction(model::CoupledModel, p0)\nAeroelasticity.SciMLBase.DAEFunction(model::CoupledModel)","category":"page"},{"location":"guide/#SciMLBase.ODEFunction-Tuple{CoupledModel, Any}","page":"Guide","title":"SciMLBase.ODEFunction","text":"ODEFunction(model::Aeroelasticity.CoupledModel, p0)\n\nConstruct an ODEFunction for a coupled model.  Note that by using this function you assume that the governing equations may be expressed in the form M(x, p, t)*dx = f(x, p, t)\n\n\n\n\n\n","category":"method"},{"location":"guide/#SciMLBase.DAEFunction-Tuple{CoupledModel}","page":"Guide","title":"SciMLBase.DAEFunction","text":"DAEFunction(model::Aeroelasticity.CoupledModel)\n\nConstruct an DAEFunction for a coupled model.\n\n\n\n\n\n","category":"method"},{"location":"guide/#Aeroelasticity","page":"Guide","title":"Aeroelasticity","text":"","category":"section"},{"location":"guide/","page":"Guide","title":"Guide","text":"The primary intended purpose of the coupling methodology presented in this package  is to faciltate constructing aeroelastic systems.  To this end, a number of aerodynamic and structural models have been implemented in this package which may be used to construct various aeroelastic models.  Each model is defined as a callable struct, with a calling signature that matches the format expected by the CoupledModel constructor. For more details about the theoretical background behind each model, we refer readers to the  relevant pages of the documentation.  For more details about how to use these models to  construct aeroelastic systems, see the examples.","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"EditURL = \"https://github.com/byuflowlab/Aeroelasticity.jl/blob/main/docs/src/literate/cantilever-stability.jl\"","category":"page"},{"location":"examples/cantilever-stability/#cantilever-stability","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"","category":"section"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"In this example, we demonstrate how to perform a three-dimensional aeroelastic analysis of a highly flexible cantilever wing.","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"(Image: )","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"tip: Tip\nThis example is also available as a Jupyter notebook: cantilever.ipynb.","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"The wing we are considering in this example was created by modifying Daedalus aircraft data and is therefore representative of a high-altitude long-endurance wing. It has a 16 meter span (from root to tip) and a 1 meter chord. To model the wing's aerodynamics, we use a lifting line model. To model the wing's structure, we use a geometrically exact beam theory model.","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"using Aeroelasticity, GXBeam, DifferentialEquations, LinearAlgebra\n\n# --- Initial Setup --- #\n\n# discretization\nN = 8 # number of elements\n\n# geometric properties\nspan = 16 # m\nchord = 1 # m\nxref = 0.5 # normalized reference location (from leading edge)\nxcg = 0.5 # center of gravity (from leading edge)\n\n# stiffness properties\nGJ = 1e4 # N*m^2 (torsional rigidity)\nEIyy = 2e4 # N*m^2 (flat bending rigidity)\nEIzz = 4e6 # N*m^2 (chord bending rigidity)\n\n# inertial properties\nmu = 0.75 # kg/m (mass per unit length)\ni11 = 0.1 # kg*m (moment of inertia about elastic axis)\ni22 = 0.0375 # moment of inertia about beam y-axis\ni33 = 0.0625 # moment of inertia about beam z-axis\n\n# freestream properties\nVinf = 10.0 # m/s (velocity)\nrho = 0.0889 # kg/m^3 (air density at 20 km)\nalpha = 2*pi/180 # angle of attack\nc = 343.0 # m/s (air speed of sound)\nbeta = sqrt(1 - Vinf^2/c^2) # Prandtl-Glauert compressibility correction factor\n\n# aerodynamic section properties\na = xref - 0.5 # normalized reference location (relative to semi-chord)\nb = chord / 2 # m (semi-chord)\na0 = 2*pi # lift slope (for each section)\nalpha0 = 0 # zero lift angle of attack (for each section)\ncd0 = 0\ncm0 = 0\n\n# define geometry (assume NED coordinate frame)\nxpt = range(0, 0, length=N+1) # point x-coordinates (in body frame)\nypt = range(0, span, length=N+1) # point y-coordinates (in body frame)\nzpt = range(0, 0, length=N+1) # point z-coordinates (in body frame)\npoints = [[xpt[i],ypt[i],zpt[i]] for i = 1:N+1]\nstart = 1:N # starting point of each beam element\nstop = 2:N+1 # ending point of each beam element\ne1 = [0, 1,  0] # beam x-axis\ne2 = [1, 0,  0] # beam y-axis\ne3 = [0, 0, -1] # beam z-axis\nframes = fill([e1 e2 e3], N) # local to body frame transformation\ncompliance = fill(Diagonal([0, 0, 0, 1/GJ, 1/EIyy, 1/EIzz]), N) # compliance matrix\nmass = fill(Diagonal([mu, mu, mu, i11, i22, i33]), N) # mass matrix\ndamping = fill(fill(1e-4, 6), N) # stiffness proportional structural damping coefficients\nassembly = GXBeam.Assembly(points, start, stop; frames, compliance, mass, damping)\n\nprescribed_conditions = Dict(\n    # fixed left edge\n    1 => GXBeam.PrescribedConditions(ux=0, uy=0, uz=0, theta_x=0, theta_y=0, theta_z=0),\n)\n\n# define GXBeam system\nsystem = DynamicSystem(assembly)\n\n# --- Define Submodels --- #\n\n# construct section models (we use Peters' finite state model in this case)\nsection_models = fill(Peters{6}(), N)\n\n# construct aerodynamic model\naerodynamic_model = LiftingLine(section_models)\n\n# construct structural model\nstructural_model = GXBeamAssembly(system; structural_damping=true)\n\n# define submodels\nsubmodels = (aerodynamic_model, structural_model)\n\n# --- Define Initial Parameters --- #\n\nV = [-Vinf*cos(alpha), 0.0, -Vinf*sin(alpha)] # m/s (freestream velocity)\n\n# define parameters for each lifting line section\nsection_parameters = fill([a, b, a0, alpha0, cd0, cm0], N)\n\n# define parameters for the lifting line model\nliftingline_parameters = LiftingLineParameters(section_parameters)\n\n# define parameters for the geometrically exact beam theory model\ngxbeam_parameters = GXBeamParameters(assembly)\n\n# define parameters for the coupling\ncoupling_parameters = LiftingLineGXBeamParameters(V, rho, beta;\n    prescribed_conditions = prescribed_conditions,\n    gravity = [-9.81*sin(alpha), 0, 9.81*cos(alpha)])\n\n# combine parameters\nparameters = (liftingline_parameters, gxbeam_parameters, coupling_parameters)\n\n# --- Define Coupled Model --- #\n\nmodel = CoupledModel(submodels, parameters; symbolic=false)\n\n# --- Perform Analysis --- #\n\n# loop through freestream velocities\nVinf = vcat(0.1, 0.25:0.25:50)\n\n# eigenvalue/eigenvector storage\nnev = 12*N\nλ = zeros(ComplexF64, nev, length(Vinf))\nUλ = zeros(ComplexF64, nev, number_of_states(model), length(Vinf))\nVλ = zeros(ComplexF64, number_of_states(model), nev, length(Vinf))\n\n# initial guess for state variables\nx0 = zeros(number_of_states(model))\n\n# loop through each velocity\nfor i = 1:length(Vinf)\n\n    # --- Update Parameters --- #\n\n    V = [-Vinf[i]*cos(alpha), 0.0, -Vinf[i]*sin(alpha)] # m/s (freestream velocity)\n\n    # define parameters for each lifting line section\n    section_parameters = fill([a, b, a0, alpha0, cd0, cm0], N)\n\n    # define parameters for the lifting line model\n    liftingline_parameters = LiftingLineParameters(section_parameters)\n\n    # define parameters for the geometrically exact beam theory model\n    gxbeam_parameters = GXBeamParameters(assembly)\n\n    # define parameters for the coupling\n    coupling_parameters = LiftingLineGXBeamParameters(V, rho, beta;\n        prescribed_conditions = prescribed_conditions,\n        gravity = [-9.81*sin(alpha), 0, 9.81*cos(alpha)])\n\n    # combine parameters\n    parameters = (liftingline_parameters, gxbeam_parameters, coupling_parameters)\n\n    # --- Perform Analysis --- #\n\n    # define an ODEFunction for this model\n    f = ODEFunction(model, parameters)\n\n    # find equilibrium point\n    sol = solve(NonlinearProblem(SteadyStateProblem(f, x0, parameters)))\n\n    # use state variables from steady state operating conditions\n    x = sol.u\n\n    # linearize about steady state operating conditions\n    K, M = linearize(model, x, parameters)\n\n    # perform linear stability analysis\n    λi, Uλi, Vλi = sparse_eigen(K, M; nev=nev)\n\n    # --- Correlate Eigenvalues --- #\n\n    if i > 1\n        # previous left eigenvector matrix\n        Uλpi = Uλ[:,:,i-1]\n\n        # use correlation matrix to correlate eigenmodes\n        perm, corruption = Aeroelasticity.correlate_eigenmodes(Uλpi, M, Vλi)\n\n        # re-arrange eigenmodes\n        λi = λi[perm]\n        Uλi = Uλi[perm,:]\n        Vλi = Vλi[:,perm]\n    end\n\n    # save eigenvalues/eigenvectors\n    λ[:,i] = λi\n    Uλ[:,:,i] = Uλi\n    Vλ[:,:,i] = Vλi\n\n    # update initial guess for the state variables\n    x0 .= x\nend","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"To identify the flutter speed and frequency, we can plot the results.","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"using Plots\npyplot()\n\nsp1 = plot(\n    xlim = (0, 50),\n    xtick = 0:5:50,\n    xlabel = \"Velocity (m/s)\",\n    ylim = (0, 350),\n    ytick = 0:50:350,\n    ylabel = \"Frequency (rad/s)\",\n    framestyle = :zerolines,\n    grid = false,\n    titlefontsize = 14,\n    guidefontsize = 14,\n    legendfontsize = 11,\n    tickfontsize = 11,\n    legend = :topright,\n    foreground_color_legend = nothing,\n    background_color_legend = nothing,\n    minorgrid=false)\n\nsp2 = plot(\n    xlim = (0, 50),\n    xtick = 0:5:50,\n    xlabel = \"Velocity (m/s)\",\n    ylim = (-4, 2),\n    ytick = -4:2:2,\n    ylabel = \"Damping (1/s)\",\n    framestyle = :zerolines,\n    grid = false,\n    titlefontsize = 14,\n    guidefontsize = 14,\n    legendfontsize = 11,\n    tickfontsize = 11,\n    legend = :topleft,\n    foreground_color_legend = nothing,\n    background_color_legend = nothing,\n    minorgrid=false)\n\nfor i = 1:size(λ, 1)\n\n    Vi = Vinf[:]\n    λi = λ[i,:]\n\n    if any(abs.(λi) .<= 1e4)\n        plot!(sp1, Vi, imag.(λi),\n            label = \"\",\n            color = i,\n            markersize = 3,\n            markerstrokewidth = 0,\n            )\n    end\n\nend\n\nfor i = 1:size(λ, 1)\n\n    Vi = Vinf[:]\n    λi = λ[i,:]\n\n    if any(abs.(λi) .<= 1e4)\n        plot!(sp2, Vi,\n            real.(λi),#./sqrt.(real.(λi).^2 + abs.(λi).^2)*100,\n            label = \"\",\n            color = i,\n            markersize = 3,\n            markerstrokewidth = 0,\n            )\n    end\nend\n\np1 = plot(sp1, sp2, layout = (1, 2), size = (800, 300))\n\nsavefig(p1, \"../assets/cantilever-stability.svg\") #hide\nnothing","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"(Image: )","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"These results are similar to those presented by Patil, Hodges, and Cesnik in \"Nonlinear Aeroelasticity and Flight Dynamics of High Altitude Long-Endurance Aircraft\" and therefore serve as a verification case for this coupled model.","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"","category":"page"},{"location":"examples/cantilever-stability/","page":"Aeroelastic Stability Analysis of a Highly Flexible Wing","title":"Aeroelastic Stability Analysis of a Highly Flexible Wing","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"EditURL = \"https://github.com/byuflowlab/Aeroelasticity.jl/blob/main/docs/src/literate/goland-stability.jl\"","category":"page"},{"location":"examples/goland-stability/#goland-stability","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"","category":"section"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"In this example, we demonstrate how to perform a three-dimensional aeroelastic analysis using the Goland wing, a low-aspect ratio prismatic metallic wing, which has been extensively used for validation.","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"(Image: )","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"tip: Tip\nThis example is also available as a Jupyter notebook: goland.ipynb.","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"The Goland wing is a cantilevered wing with a 20 ft span and 6 ft chord.  Its airfoil consists of a 4% thick parabolic arc.  There are two configurations for this wing, one with a tip store and one without.  The configuration we consider in this example is the configuration without a tip store.","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"The deflections of Goland wing are relatively small, so linear structural models are sufficient for modeling the wing's structure.  However, to demonstrate the capabilities of this package, we will use a nonlinear geometrically exact beam theory model.","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"For the aerodynamics, we use a lifting line model which is capable of using a variety of 2D models to model section lift and moment coefficients.  This aerodynamic model is ill-suited for modeling this wing due to the wing's low aspect ratio.  As a result, we cannot expect our results to accurately model the wing's physical behavior, however, we can expect them to be similar to the results found by similar analyses.","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"using Aeroelasticity, GXBeam, DifferentialEquations, LinearAlgebra\n\n# --- Initial Setup --- #\n\n# discretization\nN = 8 # number of elements\n\n# geometric properties\nspan = 6.096 # m (20 ft span)\nchord = 1.8288 # m (6 ft chord)\n\n# structural section properties\nxea = 0.33*chord # m (elastic axis, from leading edge)\nEIcc = 9.77e6 # N*m^2 (flat bending rigidity)\nGJ = 0.99e6 # N*m^2 (torsional rigidity)\nmu = 35.71 # kg/m (mass per unit length)\nxcm = 0.43*chord # m (center of mass, from leading edge)\ni11 = 8.64 # kg*m (moment of inertia about elastic axis)\ni22 = 0.1*i11 # moment of inertia about beam y-axis\ni33 = 0.9*i11 # moment of inertia about beam z-axis\n\n# freestream properties\nVinf = 100 # m/s (velocity)\nrho = 1.02 # kg/m^3 (air density)\nalpha = 0 # angle of attack\nc = 343.0 # m/s (air speed of sound)\nbeta = sqrt(1 - Vinf^2/c^2) # Prandtl-Glauert compressibility correction factor\nV = [-Vinf*cos(alpha), 0.0, -Vinf*sin(alpha)] # m/s (velocity)\n\n# aerodynamic section properties\nxref = xea/chord # normalized reference location (relative to leading edge)\na = xref - 0.5 # normalized reference location (relative to semi-chord)\nb = chord / 2 # m (semi-chord)\na0 = 0.85*(2*pi) # lift slope (for each section)\nalpha0 = 0 # zero lift angle of attack (for each section)\ncd0 = 0\ncm0 = 0\n\n# define geometry (use NED coordinate frame)\nxpt = range(0, 0, length=N+1) # point x-coordinates (in body frame)\nypt = range(0, span, length=N+1) # point y-coordinates (in body frame)\nzpt = range(0, 0, length=N+1) # point z-coordinates (in body frame)\npoints = [[xpt[i],ypt[i],zpt[i]] for i = 1:N+1]\nstart = 1:N # starting point of each beam element\nstop = 2:N+1 # ending point of each beam element\ne1 = [0, 1,  0] # beam x-axis\ne2 = [1, 0,  0] # beam y-axis\ne3 = [0, 0, -1] # beam z-axis\nframes = fill([e1 e2 e3], N) # local to body frame transformation\ncompliance = fill(Diagonal([0, 0, 0, 1/GJ, 1/EIcc, 0]), N) # compliance matrix\nxm2 = xea - xcm\nmass = fill([ # mass matrix\n    mu 0 0 0 0 -mu*xm2;\n    0 mu 0 0 0 0;\n    0 0 mu mu*xm2 0 0;\n    0 0 mu*xm2 i11 0 0;\n    0 0 0 0 i22 0;\n    -mu*xm2 0 0 0 0 i33], N)\n\n# define beam assembly\nassembly = GXBeam.Assembly(points, start, stop; frames, compliance, mass)\n\n# define prescribed conditions\nprescribed_conditions = Dict(\n    # fixed left edge\n    1 => GXBeam.PrescribedConditions(ux=0, uy=0, uz=0, theta_x=0, theta_y=0, theta_z=0),\n)\n\n# define GXBeam system\nsystem = DynamicSystem(assembly)\n\n# --- Define Submodels --- #\n\n# define section models (we use Peters' finite state model in this case)\nsection_models = fill(Peters{6}(), N)\n\n# construct lifting line model using lifting line section models\naerodynamic_model = LiftingLine(section_models)\n\n# construct geometrically exact beam theory model\nstructural_model = GXBeamAssembly(system; structural_damping=false)\n\n# combine submodels\nsubmodels = (aerodynamic_model, structural_model)\n\n# --- Define Initial Parameters --- #\n\n# define parameters for each lifting line section\nsection_parameters = fill([a, b, a0, alpha0, cd0, cm0], N)\n\n# define parameters for the lifting line model\nliftingline_parameters = LiftingLineParameters(section_parameters)\n\n# define parameters for the geometrically exact beam theory model\ngxbeam_parameters = GXBeamParameters(assembly)\n\n# define parameters for the coupling\ncoupling_parameters = LiftingLineGXBeamParameters(V, rho, beta; prescribed_conditions = prescribed_conditions)\n\n# combine parameters\nparameters = (liftingline_parameters, gxbeam_parameters, coupling_parameters)\n\n# --- Define Coupled Model --- #\n\nmodel = CoupledModel(submodels, parameters; symbolic=false)\n\n# --- Perform Analysis --- #\n\n# loop through freestream velocities\nVinf = vcat(1, 5:5:200)\n\n# eigenvalue/eigenvector storage\nnev = 12*N\nλ = zeros(ComplexF64, nev, length(Vinf))\nUλ = zeros(ComplexF64, nev, number_of_states(model), length(Vinf))\nVλ = zeros(ComplexF64, number_of_states(model), nev, length(Vinf))\n\n# initial guess for state variables\nx0 = zeros(number_of_states(model))\n\n# loop through each velocity\nfor i = 1:length(Vinf)\n\n    # --- Update Parameters --- #\n\n    # update velocity\n    V = [-Vinf[i]*cos(alpha), 0.0, -Vinf[i]*sin(alpha)]\n\n    # update compressibility correction factor\n    beta = sqrt(1 - Vinf[i]^2/c^2) # update compressibility correction\n\n    # define parameters for each lifting line section\n    section_parameters = fill([a, b, a0, alpha0, cd0, cm0], N)\n\n    # define parameters for the lifting line model\n    liftingline_parameters = LiftingLineParameters(section_parameters)\n\n    # define parameters for the geometrically exact beam theory model\n    gxbeam_parameters = GXBeamParameters(assembly)\n\n    # define parameters for the coupling\n    coupling_parameters = LiftingLineGXBeamParameters(V, rho, beta;\n        prescribed_conditions = prescribed_conditions)\n\n    # combine parameters\n    parameters = (liftingline_parameters, gxbeam_parameters, coupling_parameters)\n\n    # --- Perform Analysis --- #\n\n    # define an ODEFunction for this model\n    f = ODEFunction(model, parameters)\n\n    # find equilibrium point\n    sol = solve(NonlinearProblem(SteadyStateProblem(f, x0, parameters)))\n\n    # use state variables from steady state operating conditions\n    x = sol.u\n\n    # linearize about steady state operating conditions\n    K, M = linearize(model, x, parameters)\n\n    # perform linear stability analysis\n    λi, Uλi, Vλi = sparse_eigen(K, M; nev=nev)\n\n    # --- Correlate Eigenvalues --- #\n\n    if i > 1\n        # previous left eigenvector matrix\n        Uλpi = Uλ[:,:,i-1]\n\n        # use correlation matrix to correlate eigenmodes\n        perm, corruption = Aeroelasticity.correlate_eigenmodes(Uλpi, M, Vλi)\n\n        # re-arrange eigenmodes\n        λi = λi[perm]\n        Uλi = Uλi[perm,:]\n        Vλi = Vλi[:,perm]\n    end\n\n    # save eigenvalues/eigenvectors\n    λ[:,i] = λi\n    Uλ[:,:,i] = Uλi\n    Vλ[:,:,i] = Vλi\n\n    # update initial guess for the state variables\n    x0 .= x\nend","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"To identify the flutter speed and frequency, we can plot the results.","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"using Plots\npyplot()\n\nsp1 = plot(\n    xlim = (0, 200),\n    xtick = 0:40:200,\n    xlabel = \"Velocity (m/s)\",\n    ylim = (0, 800),\n    ytick = 0:100:800,\n    ylabel = \"Frequency (rad/s)\",\n    framestyle = :zerolines,\n    titlefontsize = 14,\n    guidefontsize = 14,\n    legendfontsize = 11,\n    tickfontsize = 11,\n    legend = :topright,\n    foreground_color_legend = nothing,\n    background_color_legend = nothing,\n    minorgrid=true)\n\nsp2 = plot(\n    xlim = (0, 200),\n    xtick = 0:40:200,\n    xlabel = \"Velocity (m/s)\",\n    ylim = (-5, 5),\n    ytick = -80:20:20,\n    ylabel = \"Damping (1/s)\",\n    framestyle = :zerolines,\n    titlefontsize = 14,\n    guidefontsize = 14,\n    legendfontsize = 11,\n    tickfontsize = 11,\n    legend = :topright,\n    foreground_color_legend = nothing,\n    background_color_legend = nothing,\n    minorgrid=true)\n\nfor i = 1:size(λ, 1)\n\n    Vi = Vinf[:]\n    λi = λ[i,:]\n\n    if any(-80 .<= real.(λi) .<= 20)\n        plot!(sp1, Vi, imag.(λi),\n            label = \"\",\n            color = i,\n            markersize = 3,\n            markerstrokewidth = 0,\n            )\n    end\n\nend\n\nfor i = 1:size(λ, 1)\n\n    Vi = Vinf[:]\n    λi = λ[i,:]\n\n    if any(-80 .<= real.(λi) .<= 20)\n        plot!(sp2, Vi,\n            real.(λi),\n            label = \"\",\n            color = i,\n            markersize = 3,\n            markerstrokewidth = 0,\n            )\n    end\nend\n\np1 = plot(sp1, sp2, layout = (2, 1), size = (600, 800))\n\nsavefig(p1, \"../assets/goland-stability.svg\") #hide\nnothing","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"(Image: )","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"As predicted by this analysis, the flutter speed is 140 m/s and the flutter frequency is 69.0 rad/s.  These results compare well with the results found by Palacios and Epureanu in \"An Intrinsic Description of the Nonlinear Aeroelasticity of Very Flexible Wings\". Their analysis, which was also based on lifting line aerodynamics predicted a flutter speed of 141 m/s and a flutter frequency of 69.8 rad/s.","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"","category":"page"},{"location":"examples/goland-stability/","page":"Aeroelastic Analysis of the Goland Wing","title":"Aeroelastic Analysis of the Goland Wing","text":"This page was generated using Literate.jl.","category":"page"},{"location":"models/aerodynamics/wagner/#Wagner's-Function","page":"Wagner's Function","title":"Wagner's Function","text":"","category":"section"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"(Image: )","category":"page"},{"location":"models/aerodynamics/wagner/#Type-Definition","page":"Wagner's Function","title":"Type Definition","text":"","category":"section"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"Wagner\nWagner()","category":"page"},{"location":"models/aerodynamics/wagner/#Aeroelasticity.Wagner","page":"Wagner's Function","title":"Aeroelasticity.Wagner","text":"Wagner(; C1=0.165, C2=0.335, eps1 = 0.0455, eps2 = 0.3)\n\nTwo-dimensional aerodynamic model based on Wagner's function with state variables lambda_1 lambda_2, inputs u v omega, and parameters a b a_0 alpha_0 c_d0 c_m0.\n\n\n\n\n\n","category":"type"},{"location":"models/aerodynamics/wagner/#Aeroelasticity.Wagner-Tuple{}","page":"Wagner's Function","title":"Aeroelasticity.Wagner","text":"Wagner(; C1=0.165, C2=0.335, eps1 = 0.0455, eps2 = 0.3)\n\nInitialize a model of type Wagner\n\n\n\n\n\n","category":"method"},{"location":"models/aerodynamics/wagner/#Example-Usage","page":"Wagner's Function","title":"Example Usage","text":"","category":"section"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"Aeroelastic Analysis of a Typical Section\nTime Domain Simulation of a Typical Section\nAeroelastic Analysis of the Goland Wing\nSteady State Aeroelastic Analysis of a Highly Flexible Wing\nAeroelastic Stability Analysis of a Highly Flexible Wing","category":"page"},{"location":"models/aerodynamics/wagner/#Theory","page":"Wagner's Function","title":"Theory","text":"","category":"section"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"This model is a two-dimensional aerodynamic model with unsteady aerodynamics which are derived from Wagner's function.","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"Wagner's function models the indicial response of aerodynamic loads under a sudden change in downwash w at the three-quarter's chord. The exact expression for Wagner's function is","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"phi(t) = frac2pi int_0^infty fracRe(C) sin ( omega (ub) t  )omega domega","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where u is the freestream velocity in the chordwise direction, omega is the freestream angular velocity, b is the semi-chord, and C(omega) is Theodorsen's function.  In many cases, approximate versions of Wagner's function are used rather than the exact expression, of which one of the most common is the approximation of Wagner's function provided by R. T. Jones","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"phi(t) = 1 - C_1 e^-varepsilon_1 (ub) t - C_2 e^-varepsilon_2 (ub) t","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where C_1 = 0165, C_2 = 0335, varepsilon_1 = 00455, and varepsilon_2 = 03.","category":"page"},{"location":"models/aerodynamics/wagner/#Normal-Force,-Axial-Force,-and-Pitching-Moment","page":"Wagner's Function","title":"Normal Force, Axial Force, and Pitching Moment","text":"","category":"section"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"Wagner's function may be used to model arbitrary airfoil motion using Duhamel's integral.  We start by modeling the increment in the circulatory normal force d mathcalN_c(t) at time t due to an increment in downwash d w(t) at earlier time tau as","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"fracd mathcalN_c(t)a_0 rho_infty u b =  phi(t - tau) d w(tau)","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where phi(t) is the impulse response function, which in this case is R. T. Jones' approximation of Wagner's function.  Superimposing all previous impulse responses using Duhamel's integral yields the following expression for the instantaneous circulatory normal force.","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"fracmathcalN_ca_0 rho_infty u b = int_-infty^t d w(tau) phi(t - tau) dtau = w(0) phi(t) + int_0^t  d w(tau) phi(t - tau) d tau","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"We can transform this equation using integration by parts, yielding","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"fracmathcalN_ca_0 rho_infty u b = w(t) phi(0) - int_0^t w(tau) dphi(t - tau) dtau","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"The integral in this expression may be expressed as a function of the aerodynamic states lambda_1 and lambda_2.","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"lambda_1 = C_1 varepsilon_1 fracub int_0^t w(tau) e^-varepsilon_1 (ub) (t - tau) d tau","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"lambda_2 = C_2 varepsilon_2 fracub int_0^t w(tau) e^-varepsilon_2 (ub) (t - tau) d tau","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"lambda_1 + lambda_2 = - int_0^t w(tau) dphi(t-tau) dtau","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"The expression for the circulatory normal force then reduces to","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"fracmathcalN_ca_0 rho_infty u b = w(t) phi(0) + lambda_1 + lambda_2","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where the downwash at the three quarter's chord is given by","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"w(t) = v + b left( frac12 - a right) omega - ualpha_0","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"and the aerodynamic states variables lambda_1 and lambda_2 are described by the ordinary differential equations","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"dotlambda_1 = -varepsilon_1 fracub lambda_1 + C_1 varepsilon_1 fracub w(t) \ndotlambda_2 = -varepsilon_2 fracub lambda_2 + C_2 varepsilon_2 fracub w(t)","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"The same normal force, axial force, and pitching moment are used as in the quasisteady model, but with the following effective angle of attack","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"alpha_texteff = left(fracvu + fracbu left( frac12 - a right) omega - alpha_0 right) phi(0) + fraclambda_1u + fraclambda_2u","category":"page"},{"location":"models/aerodynamics/wagner/#Compressibility-Correction","page":"Wagner's Function","title":"Compressibility Correction","text":"","category":"section"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"A compressibility correction may be applied to the results of this model in order to extend their applicability.  Applying a Prandtl-Glauert compressibility correction, the normal force, axial force, and pitching moment become","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"mathcalN_textcompressible = fracmathcalNbeta \nmathcalA_textcompressible = fracmathcalAbeta \nmathcalM_textcompressible = fracmathcalMbeta","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"where beta=sqrt1 - M^2 is the Prandtl-Glauert factor, which is a function of the local section Mach number M.","category":"page"},{"location":"models/aerodynamics/wagner/#Viscous-Forces","page":"Wagner's Function","title":"Viscous Forces","text":"","category":"section"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"After the Prandtl-Glauert compressibility correction has been applied, an extra force in the axial direction mathcalF_v may be added to account for viscous forces.  The magnitude of this force is scaled using the c_d_0 coefficient.","category":"page"},{"location":"models/aerodynamics/wagner/","page":"Wagner's Function","title":"Wagner's Function","text":"mathcalF_v = ρ b u^2 c_d_0","category":"page"},{"location":"examples/cantilever-steady/","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"EditURL = \"https://github.com/byuflowlab/Aeroelasticity.jl/blob/main/docs/src/literate/cantilever-steady.jl\"","category":"page"},{"location":"examples/cantilever-steady/#cantilever-steady","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"","category":"section"},{"location":"examples/cantilever-steady/","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"In this example, we demonstrate how to find steady state operating conditions for a highly flexible cantilever wing","category":"page"},{"location":"examples/cantilever-steady/","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"(Image: )","category":"page"},{"location":"examples/cantilever-steady/","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"tip: Tip\nThis example is also available as a Jupyter notebook: cantilever.ipynb.","category":"page"},{"location":"examples/cantilever-steady/","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"The wing we are considering in this example was created by modifying Daedalus aircraft data and is therefore representative of a high-altitude long-endurance wing. It has a 16 meter span (from root to tip) and a 1 meter chord. To model the wing's aerodynamics, we use a lifting line model. To model the wing's structure, we use a geometrically exact beam theory model.","category":"page"},{"location":"examples/cantilever-steady/","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"using Aeroelasticity, GXBeam, NLsolve, LineSearches, LinearAlgebra\n\n# --- Initial Setup --- #\n\n# discretization\nN = 8 # number of elements\n\n# geometric properties\nspan = 16 # m\nchord = 1 # m\nxref = 0.5 # normalized reference location (from leading edge)\nxcg = 0.5 # center of gravity (from leading edge)\n\n# stiffness properties\nGJ = 1e4 # N*m^2 (torsional rigidity)\nEIyy = 2e4 # N*m^2 (flat bending rigidity)\nEIzz = 4e6 # N*m^2 (chord bending rigidity)\n\n# inertial properties\nmu = 0.75 # kg/m (mass per unit length)\ni11 = 0.1 # kg*m (moment of inertia about elastic axis)\ni22 = 0.0375 # moment of inertia about beam y-axis\ni33 = 0.0625 # moment of inertia about beam z-axis\n\n# freestream properties\nVinf = 25.0 # m/s (velocity)\nrho = 0.0889 # kg/m^3 (air density)\nalpha = 10*pi/180 # angle of attack\nc = 343.0 # m/s (air speed of sound)\nbeta = sqrt(1 - Vinf^2/c^2) # Prandtl-Glauert compressibility correction factor\n\n# aerodynamic section properties\na = xref - 0.5 # normalized reference location (relative to semi-chord)\nb = chord / 2 # m (semi-chord)\na0 = 2*pi # lift slope (for each section)\nalpha0 = 0.0 # zero lift angle of attack (for each section)\ncd0 = 0.01\ncm0 = 0\n\n# define geometry (assume NED coordinate frame)\nxpt = range(0, 0, length=N+1) # point x-coordinates (in body frame)\nypt = range(0, span, length=N+1) # point y-coordinates (in body frame)\nzpt = range(0, 0, length=N+1) # point z-coordinates (in body frame)\npoints = [[xpt[i],ypt[i],zpt[i]] for i = 1:N+1]\nstart = 1:N # starting point of each beam element\nstop = 2:N+1 # ending point of each beam element\ne1 = [0, 1,  0] # beam x-axis\ne2 = [1, 0,  0] # beam y-axis\ne3 = [0, 0, -1] # beam z-axis\nframes = fill([e1 e2 e3], N) # local to body frame transformation\ncompliance = fill(Diagonal([0, 0, 0, 1/GJ, 1/EIyy, 1/EIzz]), N) # compliance matrix\nmass = fill(Diagonal([mu, mu, mu, i11, i22, i33]), N) # mass matrix\nassembly = GXBeam.Assembly(points, start, stop; frames, compliance, mass)\n\nprescribed_conditions = Dict(\n    # fixed left edge\n    1 => GXBeam.PrescribedConditions(ux=0, uy=0, uz=0, theta_x=0, theta_y=0, theta_z=0),\n)\n\n# define GXBeam system\nsystem = DynamicSystem(assembly)\n\n# --- Define Submodels --- #\n\n# construct section models (we use Peters' finite state model in this case)\nsection_models = fill(Peters{6}(), N)\n\n# construct aerodynamic model\naerodynamic_model = LiftingLine(section_models)\n\n# construct structural model\nstructural_model = GXBeamAssembly(system; structural_damping=false)\n\n# define submodels\nsubmodels = (aerodynamic_model, structural_model)\n\n# --- Define Initial Parameters --- #\n\nV = [-Vinf*cos(alpha), 0.0, -Vinf*sin(alpha)] # m/s (freestream velocity)\n\n# define parameters for each lifting line section\nsection_parameters = fill([a, b, a0, alpha0, cd0, cm0], N)\n\n# define parameters for the lifting line model\nliftingline_parameters = LiftingLineParameters(section_parameters)\n\n# define parameters for the geometrically exact beam theory model\ngxbeam_parameters = GXBeamParameters(assembly)\n\n# define parameters for the coupling\ncoupling_parameters = LiftingLineGXBeamParameters(V, rho, beta;\n    prescribed_conditions = prescribed_conditions,\n    gravity = [0, 0, 9.81])\n\n# combine parameters\nparameters = (liftingline_parameters, gxbeam_parameters, coupling_parameters)\n\n# --- Define Coupled Model --- #\n\nmodel = CoupledModel(submodels, parameters; symbolic=false)\n\n# --- Perform Analysis --- #\n\n# state rates equal to zero\ndx = zeros(number_of_states(model))\n\n# use previously defined parameters\np = parameters\n\n# set time to zero\nt = 0.0\n\n# define residual function\nf! = (resid, x) -> residual!(resid, model, dx, x, p, t)\n\n# define jacobian function\nj! = (jacob, x) -> state_jacobian!(jacob, model, dx, x, p, t)\n\n# define initial guess\nx0 = zeros(number_of_states(model))\n\n# find steady state operating conditions\nresult = nlsolve(f!, j!, x0; method=:newton, linesearch=LineSearches.BackTracking())\n\n# separate state variables into aerodynamic and structural states\nλ, x = separate_states(result.zero, model)\n\n# post-process the structural state\nstate = AssemblyState(x, system, assembly; prescribed_conditions)\n\n# --- Visualize the Result --- #\n\n# DAE-11 Airfoil\ndae_11 = [\n    1.0         0.0\n    0.986283    0.0010768\n    0.969651    0.0023497\n    0.947994    0.0038679\n    0.920015    0.0056143\n    0.888329    0.007331\n    0.856562    0.0087586\n    0.824998    0.0099002\n    0.793421    0.0107738\n    0.761789    0.0113933\n    0.730101    0.0117728\n    0.698376    0.0119312\n    0.666635    0.0118657\n    0.634882    0.0115701\n    0.603112    0.0110455\n    0.571312    0.0102848\n    0.539469    0.0093041\n    0.507575    0.0081154\n    0.475605    0.0067337\n    0.443554    0.0052\n    0.411434    0.0035362\n    0.37924     0.0017525\n    0.346965   -0.0001193\n    0.314611   -0.0020681\n    0.282172   -0.0040608\n    0.249739   -0.0060686\n    0.21745    -0.0080524\n    0.185384   -0.0099672\n    0.153678   -0.011747\n    0.122584   -0.0132928\n    0.0926077  -0.0144625\n    0.0648951  -0.0150664\n    0.0414512  -0.0148893\n    0.0245731  -0.0138784\n    0.0141149  -0.0123747\n    0.0080862  -0.0107002\n    0.0044148  -0.0087908\n    0.0020116  -0.0064284\n    0.0004919  -0.003486\n    0.0         0.0\n    0.000757    0.0051431\n    0.0032916   0.0114678\n    0.0082926   0.0193346\n    0.016496    0.0287274\n    0.028364    0.0393002\n    0.0439665   0.0505399\n    0.0628794   0.0618045\n    0.0844076   0.0725648\n    0.107915    0.082517\n    0.132934    0.091527\n    0.159095    0.0995398\n    0.186118    0.106551\n    0.213791    0.112558\n    0.24194     0.117585\n    0.270425    0.121658\n    0.299149    0.124802\n    0.328056    0.127043\n    0.357092    0.128382\n    0.386183    0.12885\n    0.415255    0.128434\n    0.444274    0.127109\n    0.473223    0.124888\n    0.502047    0.121778\n    0.530681    0.117774\n    0.559141    0.112838\n    0.587581    0.106907\n    0.616266    0.0999911\n    0.645437    0.0922048\n    0.675223    0.0837204\n    0.705653    0.0747378\n    0.736604    0.0655023\n    0.767351    0.0564167\n    0.79778     0.0476052\n    0.82795     0.0391518\n    0.857951    0.0311284\n    0.887967    0.0235641\n    0.918609    0.0163798\n    0.947875    0.0100446\n    0.970008    0.0056151\n    0.986483    0.0025379\n    1.0        -0.0\n]\n\nsections = zeros(3, size(dae_11, 1), length(points))\nsections[1,:,:] .= (xref .- dae_11[:,1]) * chord\nsections[3,:,:] .= (-dae_11[:,2]) * chord\n\n# visualize the result\nwrite_vtk(\"cantilever-steady-undeformed\", assembly; sections=sections)\nwrite_vtk(\"cantilever-steady-deformed\", assembly, state; sections=sections)","category":"page"},{"location":"examples/cantilever-steady/","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"(Image: )","category":"page"},{"location":"examples/cantilever-steady/","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"","category":"page"},{"location":"examples/cantilever-steady/","page":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","title":"Steady State Aeroelastic Analysis of a Highly Flexible Wing","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"EditURL = \"https://github.com/byuflowlab/Aeroelasticity.jl/blob/main/docs/src/literate/section-simulation.jl\"","category":"page"},{"location":"examples/section-simulation/#section-simulation","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"","category":"section"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"In this example, we simulate the response of two degree of freedom typical section model. We use the same parameters as in the previous example","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"(Image: )","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"tip: Tip\nThis example is also available as a Jupyter notebook: section-simulation.ipynb.","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"using Aeroelasticity, DifferentialEquations, LinearAlgebra\n\n# define non-dimensional parameters\nV = range(1e-6, 3.1, length=1000) # = U/(b*ωθ) (reduced velocity)\na = -1/5 # reference point normalized location\ne = -1/10 # center of mass normalized location\nμ = 20 # = m/(ρ*pi*b^2) (mass ratio)\nr2 = 6/25 # = Iθ/(m*b^2) (radius of gyration about P)\nσ = 2/5 # = ωh/ωθ (natural frequency ratio)\nxθ = e - a # distance from center of mass to reference point\na0 = 2*pi # lift curve slope\nα0 = 0 # zero lift angle\ncd0 = 0 # drag coefficient\ncm0 = 0 # moment coefficient\n\n# choose dimensional parameters\nb = 1 # semichord\nρ = 1 # air density\nωθ = 1 # pitch natural frequency\nc = 343 # air speed of sound\n\n# calculate dimensionalized parameters\nU = V*b*ωθ # freestrean velocity\nm = μ*ρ*pi*b^2 # mass\nSθ = m*xθ*b # mass imbalance\nIθ = r2*m*b^2 # inertia\nωh = σ*ωθ # plunge natural frequency\nkh = m*ωh^2 # plunge spring constant\nkθ = Iθ*ωθ^2 # pitch spring constant\n\n# reduced velocity\nV = 1.0 # = U/(b*ωθ)\n\n# dimensionalized velocity\nU = V*b*ωθ\n\n# define submodels\nsubmodels = (Peters{6}(), Section())\n\n# define parameter vector\np = [a, b, a0, α0, cd0, cm0, kh, kθ, m, Sθ, Iθ, U, ρ, c]\n\n# define coupled model\nmodel = CoupledModel(submodels, p)\n\n# construct function\nf = ODEFunction(model, p)\n\n# initial states\nλ = zeros(6)\nh = 0.5\ntheta = 0\nhdot = 0\nthetadot = 0\nx0 = vcat(λ, h, theta, hdot, thetadot)\n\n# simulate for 100 seconds\ntspan = (0.0, 100.0)\n\n# construct problem\nprob = ODEProblem(f, x0, tspan, p)\n\n# solve problem\nsol = solve(prob, Rodas4())\n\nnothing #hide","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"We can then plot the solution using DifferentialEquations' built-in interface with the Plots package.","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"using Plots\npyplot()\n\nplot(sol,\n    idxs = [7,8,9,10],\n    xlabel = \"t\",\n    ylabel = permutedims([\n        \"\\$h\\$\",\n        \"\\$\\\\theta\\$\",\n        \"\\$\\\\dot{h}\\$\",\n        \"\\$\\\\dot{\\\\theta}\\$\",\n        ]),\n    label = \"\",\n    layout = (4, 1),\n    size = (600,1200)\n    )\n\nsavefig(\"../assets/section-simulation-solution.svg\") #hide\nnothing #hide","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"(Image: )","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"For aeroelastic models based on a typical section, we can also visualize the section's behavior.","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"# animation parameters\na = -1/5\nb = 0.5\n\n# create animation\nanim = @animate for t in range(tspan[1], tspan[2], length=200)\n    h, θ = sol(t, idxs=7:8)\n    xplot, yplot = section_coordinates(h, θ; a, b)\n    plot(xplot, yplot;\n        framestyle = :origin,\n        grid = :false,\n        xlims = (-1.0, 1.0),\n        ylims = (-0.75, 0.75),\n        aspect_ratio = 1.0,\n        label = \"t = $(round(t, digits=1))\")\nend\n\ngif(anim, \"../assets/section-simulation.gif\")\nnothing #hide","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"(Image: )","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"","category":"page"},{"location":"examples/section-simulation/","page":"Time Domain Simulation of a Typical Section","title":"Time Domain Simulation of a Typical Section","text":"This page was generated using Literate.jl.","category":"page"},{"location":"models/structures/gxbeam/#Geometrically-Exact-Beam-Element-Assembly","page":"Geometrically Exact Beam Theory","title":"Geometrically Exact Beam Element Assembly","text":"","category":"section"},{"location":"models/structures/gxbeam/#Type-Definition","page":"Geometrically Exact Beam Theory","title":"Type Definition","text":"","category":"section"},{"location":"models/structures/gxbeam/","page":"Geometrically Exact Beam Theory","title":"Geometrically Exact Beam Theory","text":"GXBeamAssembly\nGXBeamAssembly()\nGXBeamInputs\nGXBeamParameters","category":"page"},{"location":"models/structures/gxbeam/#Aeroelasticity.GXBeamAssembly","page":"Geometrically Exact Beam Theory","title":"Aeroelasticity.GXBeamAssembly","text":"GXBeamAssembly{S}\n\nModel which describes the dynamic behavior of an assembly of beam elements, as modeled by the GXBeam package.  State variables are as defined by GXBeam.  Inputs are defined and passed as a GXBeamInputs struct. Parameters are defined and passed as a GXBeamParameters struct.\n\n\n\n\n\n","category":"type"},{"location":"models/structures/gxbeam/#Aeroelasticity.GXBeamInputs","page":"Geometrically Exact Beam Theory","title":"Aeroelasticity.GXBeamInputs","text":"GXBeamInputs(; kwargs...)\n\nDefines inputs for a geometrically exact beam theory structural model\n\nKeyword Arguments\n\nprescribed_conditions = Dict{Int,PrescribedConditions{Float64}}():      A dictionary with keys corresponding to the points at      which prescribed conditions are applied and values of type      PrescribedConditions which describe the prescribed conditions      at those points.\ndistributed_loads = Dict{Int,DistributedLoads{Float64}}(): A dictionary      with keys corresponding to the elements to which distributed loads are      applied and values of type DistributedLoads which describe      the distributed loads on those elements.\npoint_masses = Dict{Int,PointMass{Float64}}(): A dictionary with keys      corresponding to the points to which point masses are attached and values      of type PointMass which contain the properties of the attached      point masses.\nlinear_velocity = zeros(3): Prescribed linear velocity of the body frame.\nangular_velocity = zeros(3): Prescribed angular velocity of the body frame.\nlinear_acceleration = zeros(3): Prescribed linear acceleration of the body frame.\nangular_acceleration = zeros(3): Prescribed angular acceleration of the body frame.\ngravity = [0,0,0]: Gravity vector in the body frame.\n\n\n\n\n\n","category":"function"},{"location":"models/structures/gxbeam/#Aeroelasticity.GXBeamParameters","page":"Geometrically Exact Beam Theory","title":"Aeroelasticity.GXBeamParameters","text":"GXBeamParameters(assembly::GXBeam.Assembly)\n\nDefines parameters for a geometrically exact beam theory structural model\n\n\n\n\n\n","category":"function"},{"location":"models/structures/gxbeam/#Examples","page":"Geometrically Exact Beam Theory","title":"Examples","text":"","category":"section"},{"location":"models/structures/gxbeam/","page":"Geometrically Exact Beam Theory","title":"Geometrically Exact Beam Theory","text":"Aeroelastic Analysis of the Goland Wing\nSteady State Aeroelastic Analysis of a Highly Flexible Wing\nAeroelastic Stability Analysis of a Highly Flexible Wing","category":"page"},{"location":"models/structures/gxbeam/#Theory","page":"Geometrically Exact Beam Theory","title":"Theory","text":"","category":"section"},{"location":"models/structures/gxbeam/","page":"Geometrically Exact Beam Theory","title":"Geometrically Exact Beam Theory","text":"This model uses geometrically exact beam theory (as implemented by the GXBeam package to model an interconnected assembly of nonlinear beams.  For more details, refer to the documentation for the GXBeam package.","category":"page"},{"location":"models/aerodynamics/peters/#peters-finite-state-model","page":"Peters' Finite State","title":"Peters' Finite State Model","text":"","category":"section"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"(Image: )","category":"page"},{"location":"models/aerodynamics/peters/#Type-Definition","page":"Peters' Finite State","title":"Type Definition","text":"","category":"section"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"Peters\nPeters()","category":"page"},{"location":"models/aerodynamics/peters/#Aeroelasticity.Peters","page":"Peters' Finite State","title":"Aeroelasticity.Peters","text":"Peters{N,TF,TV<:SVector{N,TF},TA<:SMatrix{N,N,TF}}\n\nTwo-dimensional aerodynamic model based on Peters' finite state model with N state variables, inputs u omega dotv dotomega and parameters a b a_0 alpha_0 c_d0 c_m0\n\n\n\n\n\n","category":"type"},{"location":"models/aerodynamics/peters/#Aeroelasticity.Peters-Tuple{}","page":"Peters' Finite State","title":"Aeroelasticity.Peters","text":"Peters{N, TF=Float64}()\n\nInitialize a model with type Peters with N state variables\n\n\n\n\n\n","category":"method"},{"location":"models/aerodynamics/peters/#Examples","page":"Peters' Finite State","title":"Examples","text":"","category":"section"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"Aeroelastic Analysis of a Typical Section\nTime Domain Simulation of a Typical Section\nAeroelastic Analysis of the Goland Wing\nSteady State Aeroelastic Analysis of a Highly Flexible Wing\nAeroelastic Stability Analysis of a Highly Flexible Wing","category":"page"},{"location":"models/aerodynamics/peters/#Theory","page":"Peters' Finite State","title":"Theory","text":"","category":"section"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"For Peter's finite state model, an additional term is added to the expression for the effective angle of attack from the quasi-steady model to account for induced velocity.","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"alpha_texteff = fracvu + fracbuleft( frac12 - a right) omega + fraclambda_0u - alpha_0","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"The induced velocity lambda_0 is approximated from a set of N induced-flow states lambda_1 lambda_2 dots lambda_N as","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"lambda_0 approx frac12 sum_n=1^N b_n lambda_n","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"The set of N first-order ordinary differential equations which govern the N finite aerodynamic states are derived by Peters et al. as","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"barA lambda + fracub lambda = barc left -dotv + uomega + b left(frac12 - a right) dotomega right","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"where","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"barA = barD + bard barb^T + barc bard^T + frac12 barc  barb^T \nbarD_nm = begincases\nfrac12n  n=m+1 \nfrac-12n  n=m-1 \n0  n neq m pm 1 \nendcases\nquad\nbarb_n = begincases\nleft( -1 right)^n-1 frac(N+n-1)(N-n-1)frac1left(nright)^2  n neq N \nleft( -1 right)^n-1  n = N\nendcases\nquad\nbarc_n = frac2n\nquad\nbard_n = begincases\nfrac12  n = 1 \n0  n neq 1\nendcases","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"The same force and moment expressions are used as in the quasi-steady model, but with the new effective angle of attack provided above.","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"Note that while Peter's finite state model can accommodate any number of aerodynamic state variables, generally 3-10 state variables are used.","category":"page"},{"location":"models/aerodynamics/peters/#Compressibility-Correction","page":"Peters' Finite State","title":"Compressibility Correction","text":"","category":"section"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"A compressibility correction may be applied to the results of this model in order to extend their applicability.  Applying a Prandtl-Glauert compressibility correction, the normal force, axial force, and pitching moment become","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"mathcalN_textcompressible = fracmathcalNbeta \nmathcalA_textcompressible = fracmathcalAbeta \nmathcalM_textcompressible = fracmathcalMbeta","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"where beta=sqrt1 - M^2 is the Prandtl-Glauert factor, which is a function of the local section Mach number M.","category":"page"},{"location":"models/aerodynamics/peters/#Viscous-Forces","page":"Peters' Finite State","title":"Viscous Forces","text":"","category":"section"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"After the Prandtl-Glauert compressibility correction has been applied, an extra force in the axial direction mathcalF_v may be added to account for viscous forces.  The magnitude of this force is scaled using the c_d_0 coefficient.","category":"page"},{"location":"models/aerodynamics/peters/","page":"Peters' Finite State","title":"Peters' Finite State","text":"mathcalF_v = ρ b u^2 c_d_0","category":"page"},{"location":"#Aeroelasticity.jl","page":"Home","title":"Aeroelasticity.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: ) (Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Modular Multi-Fidelity Aeroelastic Analysis and Simulation Framework","category":"page"},{"location":"","page":"Home","title":"Home","text":"Author: Taylor McDonnell","category":"page"},{"location":"","page":"Home","title":"Home","text":"Aeroelasticity.jl is a modular multi-fidelity aeroelastic analysis and simulation package.  The intent of this package is to facilitate defining and simulating the behavior of both 2D and 3D aeroelastic systems, though it may also be used to model other coupled systems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Facilitates defining and simulating the behavior of both 2D and 3D aeroelastic systems\nContains a number of predefined aerodynamic, structural, and aeroelastic models including:\nAerodynamic Models\nSteady Thin Airfoil Theory (2D)\nQuasi-Steady Thin Airfoil Theory (2D)\nWagner's Function (2D)\nPeters' Finite State (2D)\nLifting Line (3D)\nStructural Models\nTwo Degree of Freedom Typical Section Model (2D)\nRigid Body Model (3D)\nGeometrically Exact Beam Theory Model (3D)\nSupports multiple analysis types including:\nSteady State Analyses\nEigenvalue Analyses\nTime-Marching Analyses (using DifferentialEquations)\nSeveral verification cases for built-in models (see the examples)\nProvides a modular framework for constructing general monolithic coupled systems","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Enter the package manager by typing ] and then run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/byuflowlab/Aeroelasticity.jl","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the Getting Started section of the documentation.","category":"page"},{"location":"models/aerodynamics/quasisteady/#quasi-steady-theory","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"","category":"section"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"(Image: )","category":"page"},{"location":"models/aerodynamics/quasisteady/#Type-Definition","page":"Quasi-Steady Thin Airfoil Theory","title":"Type Definition","text":"","category":"section"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"QuasiSteady\nQuasiSteady()","category":"page"},{"location":"models/aerodynamics/quasisteady/#Aeroelasticity.QuasiSteady","page":"Quasi-Steady Thin Airfoil Theory","title":"Aeroelasticity.QuasiSteady","text":"QuasiSteady\n\nTwo-dimensional aerodynamic model based on quasi-steady thin airfoil theory with parameters  a b a_0 alpha_0 c_d0 c_m0.\n\n\n\n\n\n","category":"type"},{"location":"models/aerodynamics/quasisteady/#Aeroelasticity.QuasiSteady-Tuple{}","page":"Quasi-Steady Thin Airfoil Theory","title":"Aeroelasticity.QuasiSteady","text":"QuasiSteady()\n\nInitialize a model of type QuasiSteady\n\n\n\n\n\n","category":"method"},{"location":"models/aerodynamics/quasisteady/#Examples","page":"Quasi-Steady Thin Airfoil Theory","title":"Examples","text":"","category":"section"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"Aeroelastic Analysis of a Typical Section\nTime Domain Simulation of a Typical Section\nAeroelastic Analysis of the Goland Wing\nSteady State Aeroelastic Analysis of a Highly Flexible Wing\nAeroelastic Stability Analysis of a Highly Flexible Wing","category":"page"},{"location":"models/aerodynamics/quasisteady/#Theory","page":"Quasi-Steady Thin Airfoil Theory","title":"Theory","text":"","category":"section"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"This model is a two-dimensional quasi-steady aerodynamic model derived from thin airfoil theory.  It does not have any state variables or rate equations.  Since this model includes no state variables to model wake development, this model assumes that an airfoil's wake reaches steady-state operating conditions instantaneously in response to changes in freestream velocities.","category":"page"},{"location":"models/aerodynamics/quasisteady/#Normal-Force,-Axial-Force,-and-Pitching-Moment","page":"Quasi-Steady Thin Airfoil Theory","title":"Normal Force, Axial Force, and Pitching Moment","text":"","category":"section"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"The combined forces and moments a b aft of the mid-chord for this model are","category":"page"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"mathcalN = a_0 rho_infty b u^2 alpha_texteff + pi rho b^2 left(dotv + uomega - a b dotomega right) \nmathcalA = -a_0 rho_infty b u v alpha_texteff \nmathcalM = 2 rho b^2 u^2 c_m_0 -pi rho_infty b^3 leftfrac12dotv + uomega + b left( frac18 - fraca2 right) dotomega right + b left(frac12 + a right) mathcalN","category":"page"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"where u is the local freestream velocity in the chordwise direction, v is the local freestream velocity in the normal direction, omega is the freestream angular velocity, a defines the reference location, b is the semichord, a_0 is the lift curve slope, rho_infty is the air density, and alpha_texteff is the effective angle of attack.  The effective angle of attack for this model is defined as","category":"page"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"alpha_texteff = fracvu + fracbuleft( frac12 - a right) omega - alpha_0","category":"page"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"where alpha_0 is the zero lift angle of attack.","category":"page"},{"location":"models/aerodynamics/quasisteady/#Compressibility-Correction","page":"Quasi-Steady Thin Airfoil Theory","title":"Compressibility Correction","text":"","category":"section"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"At this point, a compressibility correction may be applied to the results of thin airfoil theory in order to extend their applicability.  Applying a Prandtl-Glauert compressibility correction, the normal force, axial force, and pitching moment become","category":"page"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"mathcalN_textcompressible = fracmathcalNbeta \nmathcalA_textcompressible = fracmathcalAbeta \nmathcalM_textcompressible = fracmathcalMbeta","category":"page"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"where beta=sqrt1 - M^2 is the Prandtl-Glauert factor, which is a function of the local section Mach number M.","category":"page"},{"location":"models/aerodynamics/quasisteady/#Viscous-Forces","page":"Quasi-Steady Thin Airfoil Theory","title":"Viscous Forces","text":"","category":"section"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"After the Prandtl-Glauert compressibility correction has been applied, an extra force in the axial direction mathcalF_v may be added to account for viscous forces.  The magnitude of this force is scaled using the c_d_0 coefficient.","category":"page"},{"location":"models/aerodynamics/quasisteady/","page":"Quasi-Steady Thin Airfoil Theory","title":"Quasi-Steady Thin Airfoil Theory","text":"mathcalF_v = ρ b u^2 c_d_0","category":"page"}]
}
